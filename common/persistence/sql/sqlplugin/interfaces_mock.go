// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package sqlplugin is a generated GoMock package.
package sqlplugin

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	config "go.temporal.io/server/common/config"
	log "go.temporal.io/server/common/log"
	metrics "go.temporal.io/server/common/metrics"
	persistence "go.temporal.io/server/common/persistence"
	resolver "go.temporal.io/server/common/resolver"
)

// MockPlugin is a mock of Plugin interface.
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin.
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance.
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// CreateAdminDB mocks base method.
func (m *MockPlugin) CreateAdminDB(dbKind DbKind, cfg *config.SQL, r resolver.ServiceResolver, l log.Logger, mh metrics.Handler) (AdminDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdminDB", dbKind, cfg, r, l, mh)
	ret0, _ := ret[0].(AdminDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdminDB indicates an expected call of CreateAdminDB.
func (mr *MockPluginMockRecorder) CreateAdminDB(dbKind, cfg, r, l, mh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminDB", reflect.TypeOf((*MockPlugin)(nil).CreateAdminDB), dbKind, cfg, r, l, mh)
}

// CreateDB mocks base method.
func (m *MockPlugin) CreateDB(dbKind DbKind, cfg *config.SQL, r resolver.ServiceResolver, l log.Logger, mh metrics.Handler) (DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDB", dbKind, cfg, r, l, mh)
	ret0, _ := ret[0].(DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDB indicates an expected call of CreateDB.
func (mr *MockPluginMockRecorder) CreateDB(dbKind, cfg, r, l, mh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDB", reflect.TypeOf((*MockPlugin)(nil).CreateDB), dbKind, cfg, r, l, mh)
}

// MockTableCRUD is a mock of TableCRUD interface.
type MockTableCRUD struct {
	ctrl     *gomock.Controller
	recorder *MockTableCRUDMockRecorder
}

// MockTableCRUDMockRecorder is the mock recorder for MockTableCRUD.
type MockTableCRUDMockRecorder struct {
	mock *MockTableCRUD
}

// NewMockTableCRUD creates a new mock instance.
func NewMockTableCRUD(ctrl *gomock.Controller) *MockTableCRUD {
	mock := &MockTableCRUD{ctrl: ctrl}
	mock.recorder = &MockTableCRUDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableCRUD) EXPECT() *MockTableCRUDMockRecorder {
	return m.recorder
}

// AddToBuildIdToTaskQueueMapping mocks base method.
func (m *MockTableCRUD) AddToBuildIdToTaskQueueMapping(ctx context.Context, request AddToBuildIdToTaskQueueMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBuildIdToTaskQueueMapping", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBuildIdToTaskQueueMapping indicates an expected call of AddToBuildIdToTaskQueueMapping.
func (mr *MockTableCRUDMockRecorder) AddToBuildIdToTaskQueueMapping(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBuildIdToTaskQueueMapping", reflect.TypeOf((*MockTableCRUD)(nil).AddToBuildIdToTaskQueueMapping), ctx, request)
}

// CountFromVisibility mocks base method.
func (m *MockTableCRUD) CountFromVisibility(ctx context.Context, filter VisibilitySelectFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFromVisibility", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFromVisibility indicates an expected call of CountFromVisibility.
func (mr *MockTableCRUDMockRecorder) CountFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFromVisibility", reflect.TypeOf((*MockTableCRUD)(nil).CountFromVisibility), ctx, filter)
}

// CountGroupByFromVisibility mocks base method.
func (m *MockTableCRUD) CountGroupByFromVisibility(ctx context.Context, filter VisibilitySelectFilter) ([]VisibilityCountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountGroupByFromVisibility", ctx, filter)
	ret0, _ := ret[0].([]VisibilityCountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountGroupByFromVisibility indicates an expected call of CountGroupByFromVisibility.
func (mr *MockTableCRUDMockRecorder) CountGroupByFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountGroupByFromVisibility", reflect.TypeOf((*MockTableCRUD)(nil).CountGroupByFromVisibility), ctx, filter)
}

// CountTaskQueuesByBuildId mocks base method.
func (m *MockTableCRUD) CountTaskQueuesByBuildId(ctx context.Context, request *CountTaskQueuesByBuildIdRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTaskQueuesByBuildId", ctx, request)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTaskQueuesByBuildId indicates an expected call of CountTaskQueuesByBuildId.
func (mr *MockTableCRUDMockRecorder) CountTaskQueuesByBuildId(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTaskQueuesByBuildId", reflect.TypeOf((*MockTableCRUD)(nil).CountTaskQueuesByBuildId), ctx, request)
}

// DeleteAllFromActivityInfoMaps mocks base method.
func (m *MockTableCRUD) DeleteAllFromActivityInfoMaps(ctx context.Context, filter ActivityInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromActivityInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromActivityInfoMaps indicates an expected call of DeleteAllFromActivityInfoMaps.
func (mr *MockTableCRUDMockRecorder) DeleteAllFromActivityInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromActivityInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).DeleteAllFromActivityInfoMaps), ctx, filter)
}

// DeleteAllFromChildExecutionInfoMaps mocks base method.
func (m *MockTableCRUD) DeleteAllFromChildExecutionInfoMaps(ctx context.Context, filter ChildExecutionInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromChildExecutionInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromChildExecutionInfoMaps indicates an expected call of DeleteAllFromChildExecutionInfoMaps.
func (mr *MockTableCRUDMockRecorder) DeleteAllFromChildExecutionInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromChildExecutionInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).DeleteAllFromChildExecutionInfoMaps), ctx, filter)
}

// DeleteAllFromRequestCancelInfoMaps mocks base method.
func (m *MockTableCRUD) DeleteAllFromRequestCancelInfoMaps(ctx context.Context, filter RequestCancelInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromRequestCancelInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromRequestCancelInfoMaps indicates an expected call of DeleteAllFromRequestCancelInfoMaps.
func (mr *MockTableCRUDMockRecorder) DeleteAllFromRequestCancelInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromRequestCancelInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).DeleteAllFromRequestCancelInfoMaps), ctx, filter)
}

// DeleteAllFromSignalInfoMaps mocks base method.
func (m *MockTableCRUD) DeleteAllFromSignalInfoMaps(ctx context.Context, filter SignalInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromSignalInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromSignalInfoMaps indicates an expected call of DeleteAllFromSignalInfoMaps.
func (mr *MockTableCRUDMockRecorder) DeleteAllFromSignalInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromSignalInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).DeleteAllFromSignalInfoMaps), ctx, filter)
}

// DeleteAllFromSignalsRequestedSets mocks base method.
func (m *MockTableCRUD) DeleteAllFromSignalsRequestedSets(ctx context.Context, filter SignalsRequestedSetsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromSignalsRequestedSets", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromSignalsRequestedSets indicates an expected call of DeleteAllFromSignalsRequestedSets.
func (mr *MockTableCRUDMockRecorder) DeleteAllFromSignalsRequestedSets(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromSignalsRequestedSets", reflect.TypeOf((*MockTableCRUD)(nil).DeleteAllFromSignalsRequestedSets), ctx, filter)
}

// DeleteAllFromTimerInfoMaps mocks base method.
func (m *MockTableCRUD) DeleteAllFromTimerInfoMaps(ctx context.Context, filter TimerInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromTimerInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromTimerInfoMaps indicates an expected call of DeleteAllFromTimerInfoMaps.
func (mr *MockTableCRUDMockRecorder) DeleteAllFromTimerInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromTimerInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).DeleteAllFromTimerInfoMaps), ctx, filter)
}

// DeleteClusterMetadata mocks base method.
func (m *MockTableCRUD) DeleteClusterMetadata(ctx context.Context, filter *ClusterMetadataFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterMetadata", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterMetadata indicates an expected call of DeleteClusterMetadata.
func (mr *MockTableCRUDMockRecorder) DeleteClusterMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterMetadata", reflect.TypeOf((*MockTableCRUD)(nil).DeleteClusterMetadata), ctx, filter)
}

// DeleteFromActivityInfoMaps mocks base method.
func (m *MockTableCRUD) DeleteFromActivityInfoMaps(ctx context.Context, filter ActivityInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromActivityInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromActivityInfoMaps indicates an expected call of DeleteFromActivityInfoMaps.
func (mr *MockTableCRUDMockRecorder) DeleteFromActivityInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromActivityInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromActivityInfoMaps), ctx, filter)
}

// DeleteFromBufferedEvents mocks base method.
func (m *MockTableCRUD) DeleteFromBufferedEvents(ctx context.Context, filter BufferedEventsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromBufferedEvents", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromBufferedEvents indicates an expected call of DeleteFromBufferedEvents.
func (mr *MockTableCRUDMockRecorder) DeleteFromBufferedEvents(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromBufferedEvents", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromBufferedEvents), ctx, filter)
}

// DeleteFromChildExecutionInfoMaps mocks base method.
func (m *MockTableCRUD) DeleteFromChildExecutionInfoMaps(ctx context.Context, filter ChildExecutionInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromChildExecutionInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromChildExecutionInfoMaps indicates an expected call of DeleteFromChildExecutionInfoMaps.
func (mr *MockTableCRUDMockRecorder) DeleteFromChildExecutionInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromChildExecutionInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromChildExecutionInfoMaps), ctx, filter)
}

// DeleteFromCurrentExecutions mocks base method.
func (m *MockTableCRUD) DeleteFromCurrentExecutions(ctx context.Context, filter CurrentExecutionsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromCurrentExecutions", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromCurrentExecutions indicates an expected call of DeleteFromCurrentExecutions.
func (mr *MockTableCRUDMockRecorder) DeleteFromCurrentExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromCurrentExecutions", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromCurrentExecutions), ctx, filter)
}

// DeleteFromExecutions mocks base method.
func (m *MockTableCRUD) DeleteFromExecutions(ctx context.Context, filter ExecutionsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromExecutions", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromExecutions indicates an expected call of DeleteFromExecutions.
func (mr *MockTableCRUDMockRecorder) DeleteFromExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromExecutions", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromExecutions), ctx, filter)
}

// DeleteFromHistoryImmediateTasks mocks base method.
func (m *MockTableCRUD) DeleteFromHistoryImmediateTasks(ctx context.Context, filter HistoryImmediateTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromHistoryImmediateTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromHistoryImmediateTasks indicates an expected call of DeleteFromHistoryImmediateTasks.
func (mr *MockTableCRUDMockRecorder) DeleteFromHistoryImmediateTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromHistoryImmediateTasks", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromHistoryImmediateTasks), ctx, filter)
}

// DeleteFromHistoryNode mocks base method.
func (m *MockTableCRUD) DeleteFromHistoryNode(ctx context.Context, row *HistoryNodeRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromHistoryNode", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromHistoryNode indicates an expected call of DeleteFromHistoryNode.
func (mr *MockTableCRUDMockRecorder) DeleteFromHistoryNode(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromHistoryNode", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromHistoryNode), ctx, row)
}

// DeleteFromHistoryScheduledTasks mocks base method.
func (m *MockTableCRUD) DeleteFromHistoryScheduledTasks(ctx context.Context, filter HistoryScheduledTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromHistoryScheduledTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromHistoryScheduledTasks indicates an expected call of DeleteFromHistoryScheduledTasks.
func (mr *MockTableCRUDMockRecorder) DeleteFromHistoryScheduledTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromHistoryScheduledTasks", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromHistoryScheduledTasks), ctx, filter)
}

// DeleteFromHistoryTree mocks base method.
func (m *MockTableCRUD) DeleteFromHistoryTree(ctx context.Context, filter HistoryTreeDeleteFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromHistoryTree", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromHistoryTree indicates an expected call of DeleteFromHistoryTree.
func (mr *MockTableCRUDMockRecorder) DeleteFromHistoryTree(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromHistoryTree", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromHistoryTree), ctx, filter)
}

// DeleteFromMessages mocks base method.
func (m *MockTableCRUD) DeleteFromMessages(ctx context.Context, filter QueueMessagesFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromMessages", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromMessages indicates an expected call of DeleteFromMessages.
func (mr *MockTableCRUDMockRecorder) DeleteFromMessages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromMessages", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromMessages), ctx, filter)
}

// DeleteFromNamespace mocks base method.
func (m *MockTableCRUD) DeleteFromNamespace(ctx context.Context, filter NamespaceFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromNamespace", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromNamespace indicates an expected call of DeleteFromNamespace.
func (mr *MockTableCRUDMockRecorder) DeleteFromNamespace(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromNamespace", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromNamespace), ctx, filter)
}

// DeleteFromNexusEndpoints mocks base method.
func (m *MockTableCRUD) DeleteFromNexusEndpoints(ctx context.Context, id []byte) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromNexusEndpoints", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromNexusEndpoints indicates an expected call of DeleteFromNexusEndpoints.
func (mr *MockTableCRUDMockRecorder) DeleteFromNexusEndpoints(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromNexusEndpoints", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromNexusEndpoints), ctx, id)
}

// DeleteFromReplicationDLQTasks mocks base method.
func (m *MockTableCRUD) DeleteFromReplicationDLQTasks(ctx context.Context, filter ReplicationDLQTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromReplicationDLQTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromReplicationDLQTasks indicates an expected call of DeleteFromReplicationDLQTasks.
func (mr *MockTableCRUDMockRecorder) DeleteFromReplicationDLQTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromReplicationDLQTasks", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromReplicationDLQTasks), ctx, filter)
}

// DeleteFromReplicationTasks mocks base method.
func (m *MockTableCRUD) DeleteFromReplicationTasks(ctx context.Context, filter ReplicationTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromReplicationTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromReplicationTasks indicates an expected call of DeleteFromReplicationTasks.
func (mr *MockTableCRUDMockRecorder) DeleteFromReplicationTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromReplicationTasks", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromReplicationTasks), ctx, filter)
}

// DeleteFromRequestCancelInfoMaps mocks base method.
func (m *MockTableCRUD) DeleteFromRequestCancelInfoMaps(ctx context.Context, filter RequestCancelInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromRequestCancelInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromRequestCancelInfoMaps indicates an expected call of DeleteFromRequestCancelInfoMaps.
func (mr *MockTableCRUDMockRecorder) DeleteFromRequestCancelInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromRequestCancelInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromRequestCancelInfoMaps), ctx, filter)
}

// DeleteFromSignalInfoMaps mocks base method.
func (m *MockTableCRUD) DeleteFromSignalInfoMaps(ctx context.Context, filter SignalInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromSignalInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromSignalInfoMaps indicates an expected call of DeleteFromSignalInfoMaps.
func (mr *MockTableCRUDMockRecorder) DeleteFromSignalInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromSignalInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromSignalInfoMaps), ctx, filter)
}

// DeleteFromSignalsRequestedSets mocks base method.
func (m *MockTableCRUD) DeleteFromSignalsRequestedSets(ctx context.Context, filter SignalsRequestedSetsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromSignalsRequestedSets", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromSignalsRequestedSets indicates an expected call of DeleteFromSignalsRequestedSets.
func (mr *MockTableCRUDMockRecorder) DeleteFromSignalsRequestedSets(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromSignalsRequestedSets", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromSignalsRequestedSets), ctx, filter)
}

// DeleteFromTaskQueues mocks base method.
func (m *MockTableCRUD) DeleteFromTaskQueues(ctx context.Context, filter TaskQueuesFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTaskQueues", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTaskQueues indicates an expected call of DeleteFromTaskQueues.
func (mr *MockTableCRUDMockRecorder) DeleteFromTaskQueues(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTaskQueues", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromTaskQueues), ctx, filter)
}

// DeleteFromTasks mocks base method.
func (m *MockTableCRUD) DeleteFromTasks(ctx context.Context, filter TasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTasks indicates an expected call of DeleteFromTasks.
func (mr *MockTableCRUDMockRecorder) DeleteFromTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTasks", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromTasks), ctx, filter)
}

// DeleteFromTimerInfoMaps mocks base method.
func (m *MockTableCRUD) DeleteFromTimerInfoMaps(ctx context.Context, filter TimerInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTimerInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTimerInfoMaps indicates an expected call of DeleteFromTimerInfoMaps.
func (mr *MockTableCRUDMockRecorder) DeleteFromTimerInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTimerInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromTimerInfoMaps), ctx, filter)
}

// DeleteFromTimerTasks mocks base method.
func (m *MockTableCRUD) DeleteFromTimerTasks(ctx context.Context, filter TimerTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTimerTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTimerTasks indicates an expected call of DeleteFromTimerTasks.
func (mr *MockTableCRUDMockRecorder) DeleteFromTimerTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTimerTasks", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromTimerTasks), ctx, filter)
}

// DeleteFromTransferTasks mocks base method.
func (m *MockTableCRUD) DeleteFromTransferTasks(ctx context.Context, filter TransferTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTransferTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTransferTasks indicates an expected call of DeleteFromTransferTasks.
func (mr *MockTableCRUDMockRecorder) DeleteFromTransferTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTransferTasks", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromTransferTasks), ctx, filter)
}

// DeleteFromVisibility mocks base method.
func (m *MockTableCRUD) DeleteFromVisibility(ctx context.Context, filter VisibilityDeleteFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromVisibility", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromVisibility indicates an expected call of DeleteFromVisibility.
func (mr *MockTableCRUDMockRecorder) DeleteFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromVisibility", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromVisibility), ctx, filter)
}

// DeleteFromVisibilityTasks mocks base method.
func (m *MockTableCRUD) DeleteFromVisibilityTasks(ctx context.Context, filter VisibilityTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromVisibilityTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromVisibilityTasks indicates an expected call of DeleteFromVisibilityTasks.
func (mr *MockTableCRUDMockRecorder) DeleteFromVisibilityTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromVisibilityTasks", reflect.TypeOf((*MockTableCRUD)(nil).DeleteFromVisibilityTasks), ctx, filter)
}

// GetClusterMembers mocks base method.
func (m *MockTableCRUD) GetClusterMembers(ctx context.Context, filter *ClusterMembershipFilter) ([]ClusterMembershipRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMembers", ctx, filter)
	ret0, _ := ret[0].([]ClusterMembershipRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMembers indicates an expected call of GetClusterMembers.
func (mr *MockTableCRUDMockRecorder) GetClusterMembers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMembers", reflect.TypeOf((*MockTableCRUD)(nil).GetClusterMembers), ctx, filter)
}

// GetClusterMetadata mocks base method.
func (m *MockTableCRUD) GetClusterMetadata(ctx context.Context, filter *ClusterMetadataFilter) (*ClusterMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMetadata", ctx, filter)
	ret0, _ := ret[0].(*ClusterMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMetadata indicates an expected call of GetClusterMetadata.
func (mr *MockTableCRUDMockRecorder) GetClusterMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMetadata", reflect.TypeOf((*MockTableCRUD)(nil).GetClusterMetadata), ctx, filter)
}

// GetFromVisibility mocks base method.
func (m *MockTableCRUD) GetFromVisibility(ctx context.Context, filter VisibilityGetFilter) (*VisibilityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromVisibility", ctx, filter)
	ret0, _ := ret[0].(*VisibilityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromVisibility indicates an expected call of GetFromVisibility.
func (mr *MockTableCRUDMockRecorder) GetFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromVisibility", reflect.TypeOf((*MockTableCRUD)(nil).GetFromVisibility), ctx, filter)
}

// GetLastEnqueuedMessageIDForUpdate mocks base method.
func (m *MockTableCRUD) GetLastEnqueuedMessageIDForUpdate(ctx context.Context, queueType persistence.QueueType) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastEnqueuedMessageIDForUpdate", ctx, queueType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastEnqueuedMessageIDForUpdate indicates an expected call of GetLastEnqueuedMessageIDForUpdate.
func (mr *MockTableCRUDMockRecorder) GetLastEnqueuedMessageIDForUpdate(ctx, queueType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEnqueuedMessageIDForUpdate", reflect.TypeOf((*MockTableCRUD)(nil).GetLastEnqueuedMessageIDForUpdate), ctx, queueType)
}

// GetLastEnqueuedMessageIDForUpdateV2 mocks base method.
func (m *MockTableCRUD) GetLastEnqueuedMessageIDForUpdateV2(ctx context.Context, filter QueueV2Filter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastEnqueuedMessageIDForUpdateV2", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastEnqueuedMessageIDForUpdateV2 indicates an expected call of GetLastEnqueuedMessageIDForUpdateV2.
func (mr *MockTableCRUDMockRecorder) GetLastEnqueuedMessageIDForUpdateV2(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEnqueuedMessageIDForUpdateV2", reflect.TypeOf((*MockTableCRUD)(nil).GetLastEnqueuedMessageIDForUpdateV2), ctx, filter)
}

// GetNexusEndpointByID mocks base method.
func (m *MockTableCRUD) GetNexusEndpointByID(ctx context.Context, serviceID []byte) (*NexusEndpointsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNexusEndpointByID", ctx, serviceID)
	ret0, _ := ret[0].(*NexusEndpointsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusEndpointByID indicates an expected call of GetNexusEndpointByID.
func (mr *MockTableCRUDMockRecorder) GetNexusEndpointByID(ctx, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusEndpointByID", reflect.TypeOf((*MockTableCRUD)(nil).GetNexusEndpointByID), ctx, serviceID)
}

// GetNexusEndpointsTableVersion mocks base method.
func (m *MockTableCRUD) GetNexusEndpointsTableVersion(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNexusEndpointsTableVersion", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusEndpointsTableVersion indicates an expected call of GetNexusEndpointsTableVersion.
func (mr *MockTableCRUDMockRecorder) GetNexusEndpointsTableVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusEndpointsTableVersion", reflect.TypeOf((*MockTableCRUD)(nil).GetNexusEndpointsTableVersion), ctx)
}

// GetTaskQueueUserData mocks base method.
func (m *MockTableCRUD) GetTaskQueueUserData(ctx context.Context, request *GetTaskQueueUserDataRequest) (*VersionedBlob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskQueueUserData", ctx, request)
	ret0, _ := ret[0].(*VersionedBlob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskQueueUserData indicates an expected call of GetTaskQueueUserData.
func (mr *MockTableCRUDMockRecorder) GetTaskQueueUserData(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskQueueUserData", reflect.TypeOf((*MockTableCRUD)(nil).GetTaskQueueUserData), ctx, request)
}

// GetTaskQueuesByBuildId mocks base method.
func (m *MockTableCRUD) GetTaskQueuesByBuildId(ctx context.Context, request *GetTaskQueuesByBuildIdRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskQueuesByBuildId", ctx, request)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskQueuesByBuildId indicates an expected call of GetTaskQueuesByBuildId.
func (mr *MockTableCRUDMockRecorder) GetTaskQueuesByBuildId(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskQueuesByBuildId", reflect.TypeOf((*MockTableCRUD)(nil).GetTaskQueuesByBuildId), ctx, request)
}

// IncrementNexusEndpointsTableVersion mocks base method.
func (m *MockTableCRUD) IncrementNexusEndpointsTableVersion(ctx context.Context, lastKnownTableVersion int64) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementNexusEndpointsTableVersion", ctx, lastKnownTableVersion)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementNexusEndpointsTableVersion indicates an expected call of IncrementNexusEndpointsTableVersion.
func (mr *MockTableCRUDMockRecorder) IncrementNexusEndpointsTableVersion(ctx, lastKnownTableVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementNexusEndpointsTableVersion", reflect.TypeOf((*MockTableCRUD)(nil).IncrementNexusEndpointsTableVersion), ctx, lastKnownTableVersion)
}

// InitializeNexusEndpointsTableVersion mocks base method.
func (m *MockTableCRUD) InitializeNexusEndpointsTableVersion(ctx context.Context) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeNexusEndpointsTableVersion", ctx)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeNexusEndpointsTableVersion indicates an expected call of InitializeNexusEndpointsTableVersion.
func (mr *MockTableCRUDMockRecorder) InitializeNexusEndpointsTableVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeNexusEndpointsTableVersion", reflect.TypeOf((*MockTableCRUD)(nil).InitializeNexusEndpointsTableVersion), ctx)
}

// InsertIntoBufferedEvents mocks base method.
func (m *MockTableCRUD) InsertIntoBufferedEvents(ctx context.Context, rows []BufferedEventsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoBufferedEvents", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoBufferedEvents indicates an expected call of InsertIntoBufferedEvents.
func (mr *MockTableCRUDMockRecorder) InsertIntoBufferedEvents(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoBufferedEvents", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoBufferedEvents), ctx, rows)
}

// InsertIntoCurrentExecutions mocks base method.
func (m *MockTableCRUD) InsertIntoCurrentExecutions(ctx context.Context, row *CurrentExecutionsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoCurrentExecutions", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoCurrentExecutions indicates an expected call of InsertIntoCurrentExecutions.
func (mr *MockTableCRUDMockRecorder) InsertIntoCurrentExecutions(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoCurrentExecutions", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoCurrentExecutions), ctx, row)
}

// InsertIntoExecutions mocks base method.
func (m *MockTableCRUD) InsertIntoExecutions(ctx context.Context, row *ExecutionsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoExecutions", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoExecutions indicates an expected call of InsertIntoExecutions.
func (mr *MockTableCRUDMockRecorder) InsertIntoExecutions(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoExecutions", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoExecutions), ctx, row)
}

// InsertIntoHistoryImmediateTasks mocks base method.
func (m *MockTableCRUD) InsertIntoHistoryImmediateTasks(ctx context.Context, rows []HistoryImmediateTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoHistoryImmediateTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoHistoryImmediateTasks indicates an expected call of InsertIntoHistoryImmediateTasks.
func (mr *MockTableCRUDMockRecorder) InsertIntoHistoryImmediateTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoHistoryImmediateTasks", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoHistoryImmediateTasks), ctx, rows)
}

// InsertIntoHistoryNode mocks base method.
func (m *MockTableCRUD) InsertIntoHistoryNode(ctx context.Context, row *HistoryNodeRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoHistoryNode", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoHistoryNode indicates an expected call of InsertIntoHistoryNode.
func (mr *MockTableCRUDMockRecorder) InsertIntoHistoryNode(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoHistoryNode", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoHistoryNode), ctx, row)
}

// InsertIntoHistoryScheduledTasks mocks base method.
func (m *MockTableCRUD) InsertIntoHistoryScheduledTasks(ctx context.Context, rows []HistoryScheduledTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoHistoryScheduledTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoHistoryScheduledTasks indicates an expected call of InsertIntoHistoryScheduledTasks.
func (mr *MockTableCRUDMockRecorder) InsertIntoHistoryScheduledTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoHistoryScheduledTasks", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoHistoryScheduledTasks), ctx, rows)
}

// InsertIntoHistoryTree mocks base method.
func (m *MockTableCRUD) InsertIntoHistoryTree(ctx context.Context, row *HistoryTreeRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoHistoryTree", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoHistoryTree indicates an expected call of InsertIntoHistoryTree.
func (mr *MockTableCRUDMockRecorder) InsertIntoHistoryTree(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoHistoryTree", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoHistoryTree), ctx, row)
}

// InsertIntoMessages mocks base method.
func (m *MockTableCRUD) InsertIntoMessages(ctx context.Context, row []QueueMessageRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoMessages", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoMessages indicates an expected call of InsertIntoMessages.
func (mr *MockTableCRUDMockRecorder) InsertIntoMessages(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoMessages", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoMessages), ctx, row)
}

// InsertIntoNamespace mocks base method.
func (m *MockTableCRUD) InsertIntoNamespace(ctx context.Context, rows *NamespaceRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoNamespace", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoNamespace indicates an expected call of InsertIntoNamespace.
func (mr *MockTableCRUDMockRecorder) InsertIntoNamespace(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoNamespace", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoNamespace), ctx, rows)
}

// InsertIntoNexusEndpoints mocks base method.
func (m *MockTableCRUD) InsertIntoNexusEndpoints(ctx context.Context, row *NexusEndpointsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoNexusEndpoints", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoNexusEndpoints indicates an expected call of InsertIntoNexusEndpoints.
func (mr *MockTableCRUDMockRecorder) InsertIntoNexusEndpoints(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoNexusEndpoints", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoNexusEndpoints), ctx, row)
}

// InsertIntoQueueMetadata mocks base method.
func (m *MockTableCRUD) InsertIntoQueueMetadata(ctx context.Context, row *QueueMetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoQueueMetadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoQueueMetadata indicates an expected call of InsertIntoQueueMetadata.
func (mr *MockTableCRUDMockRecorder) InsertIntoQueueMetadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoQueueMetadata", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoQueueMetadata), ctx, row)
}

// InsertIntoQueueV2Messages mocks base method.
func (m *MockTableCRUD) InsertIntoQueueV2Messages(ctx context.Context, row []QueueV2MessageRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoQueueV2Messages", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoQueueV2Messages indicates an expected call of InsertIntoQueueV2Messages.
func (mr *MockTableCRUDMockRecorder) InsertIntoQueueV2Messages(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoQueueV2Messages", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoQueueV2Messages), ctx, row)
}

// InsertIntoQueueV2Metadata mocks base method.
func (m *MockTableCRUD) InsertIntoQueueV2Metadata(ctx context.Context, row *QueueV2MetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoQueueV2Metadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoQueueV2Metadata indicates an expected call of InsertIntoQueueV2Metadata.
func (mr *MockTableCRUDMockRecorder) InsertIntoQueueV2Metadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoQueueV2Metadata", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoQueueV2Metadata), ctx, row)
}

// InsertIntoReplicationDLQTasks mocks base method.
func (m *MockTableCRUD) InsertIntoReplicationDLQTasks(ctx context.Context, row []ReplicationDLQTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoReplicationDLQTasks", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoReplicationDLQTasks indicates an expected call of InsertIntoReplicationDLQTasks.
func (mr *MockTableCRUDMockRecorder) InsertIntoReplicationDLQTasks(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoReplicationDLQTasks", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoReplicationDLQTasks), ctx, row)
}

// InsertIntoReplicationTasks mocks base method.
func (m *MockTableCRUD) InsertIntoReplicationTasks(ctx context.Context, rows []ReplicationTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoReplicationTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoReplicationTasks indicates an expected call of InsertIntoReplicationTasks.
func (mr *MockTableCRUDMockRecorder) InsertIntoReplicationTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoReplicationTasks", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoReplicationTasks), ctx, rows)
}

// InsertIntoShards mocks base method.
func (m *MockTableCRUD) InsertIntoShards(ctx context.Context, rows *ShardsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoShards", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoShards indicates an expected call of InsertIntoShards.
func (mr *MockTableCRUDMockRecorder) InsertIntoShards(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoShards", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoShards), ctx, rows)
}

// InsertIntoTaskQueues mocks base method.
func (m *MockTableCRUD) InsertIntoTaskQueues(ctx context.Context, row *TaskQueuesRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoTaskQueues", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoTaskQueues indicates an expected call of InsertIntoTaskQueues.
func (mr *MockTableCRUDMockRecorder) InsertIntoTaskQueues(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoTaskQueues", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoTaskQueues), ctx, row)
}

// InsertIntoTasks mocks base method.
func (m *MockTableCRUD) InsertIntoTasks(ctx context.Context, rows []TasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoTasks indicates an expected call of InsertIntoTasks.
func (mr *MockTableCRUDMockRecorder) InsertIntoTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoTasks", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoTasks), ctx, rows)
}

// InsertIntoTimerTasks mocks base method.
func (m *MockTableCRUD) InsertIntoTimerTasks(ctx context.Context, rows []TimerTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoTimerTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoTimerTasks indicates an expected call of InsertIntoTimerTasks.
func (mr *MockTableCRUDMockRecorder) InsertIntoTimerTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoTimerTasks", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoTimerTasks), ctx, rows)
}

// InsertIntoTransferTasks mocks base method.
func (m *MockTableCRUD) InsertIntoTransferTasks(ctx context.Context, rows []TransferTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoTransferTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoTransferTasks indicates an expected call of InsertIntoTransferTasks.
func (mr *MockTableCRUDMockRecorder) InsertIntoTransferTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoTransferTasks", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoTransferTasks), ctx, rows)
}

// InsertIntoVisibility mocks base method.
func (m *MockTableCRUD) InsertIntoVisibility(ctx context.Context, row *VisibilityRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoVisibility", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoVisibility indicates an expected call of InsertIntoVisibility.
func (mr *MockTableCRUDMockRecorder) InsertIntoVisibility(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoVisibility", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoVisibility), ctx, row)
}

// InsertIntoVisibilityTasks mocks base method.
func (m *MockTableCRUD) InsertIntoVisibilityTasks(ctx context.Context, rows []VisibilityTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoVisibilityTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoVisibilityTasks indicates an expected call of InsertIntoVisibilityTasks.
func (mr *MockTableCRUDMockRecorder) InsertIntoVisibilityTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoVisibilityTasks", reflect.TypeOf((*MockTableCRUD)(nil).InsertIntoVisibilityTasks), ctx, rows)
}

// ListClusterMetadata mocks base method.
func (m *MockTableCRUD) ListClusterMetadata(ctx context.Context, filter *ClusterMetadataFilter) ([]ClusterMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterMetadata", ctx, filter)
	ret0, _ := ret[0].([]ClusterMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterMetadata indicates an expected call of ListClusterMetadata.
func (mr *MockTableCRUDMockRecorder) ListClusterMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterMetadata", reflect.TypeOf((*MockTableCRUD)(nil).ListClusterMetadata), ctx, filter)
}

// ListNexusEndpoints mocks base method.
func (m *MockTableCRUD) ListNexusEndpoints(ctx context.Context, request *ListNexusEndpointsRequest) ([]NexusEndpointsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNexusEndpoints", ctx, request)
	ret0, _ := ret[0].([]NexusEndpointsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNexusEndpoints indicates an expected call of ListNexusEndpoints.
func (mr *MockTableCRUDMockRecorder) ListNexusEndpoints(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNexusEndpoints", reflect.TypeOf((*MockTableCRUD)(nil).ListNexusEndpoints), ctx, request)
}

// ListTaskQueueUserDataEntries mocks base method.
func (m *MockTableCRUD) ListTaskQueueUserDataEntries(ctx context.Context, request *ListTaskQueueUserDataEntriesRequest) ([]TaskQueueUserDataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaskQueueUserDataEntries", ctx, request)
	ret0, _ := ret[0].([]TaskQueueUserDataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaskQueueUserDataEntries indicates an expected call of ListTaskQueueUserDataEntries.
func (mr *MockTableCRUDMockRecorder) ListTaskQueueUserDataEntries(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaskQueueUserDataEntries", reflect.TypeOf((*MockTableCRUD)(nil).ListTaskQueueUserDataEntries), ctx, request)
}

// LockCurrentExecutions mocks base method.
func (m *MockTableCRUD) LockCurrentExecutions(ctx context.Context, filter CurrentExecutionsFilter) (*CurrentExecutionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockCurrentExecutions", ctx, filter)
	ret0, _ := ret[0].(*CurrentExecutionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockCurrentExecutions indicates an expected call of LockCurrentExecutions.
func (mr *MockTableCRUDMockRecorder) LockCurrentExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockCurrentExecutions", reflect.TypeOf((*MockTableCRUD)(nil).LockCurrentExecutions), ctx, filter)
}

// LockCurrentExecutionsJoinExecutions mocks base method.
func (m *MockTableCRUD) LockCurrentExecutionsJoinExecutions(ctx context.Context, filter CurrentExecutionsFilter) ([]CurrentExecutionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockCurrentExecutionsJoinExecutions", ctx, filter)
	ret0, _ := ret[0].([]CurrentExecutionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockCurrentExecutionsJoinExecutions indicates an expected call of LockCurrentExecutionsJoinExecutions.
func (mr *MockTableCRUDMockRecorder) LockCurrentExecutionsJoinExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockCurrentExecutionsJoinExecutions", reflect.TypeOf((*MockTableCRUD)(nil).LockCurrentExecutionsJoinExecutions), ctx, filter)
}

// LockNamespaceMetadata mocks base method.
func (m *MockTableCRUD) LockNamespaceMetadata(ctx context.Context) (*NamespaceMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockNamespaceMetadata", ctx)
	ret0, _ := ret[0].(*NamespaceMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockNamespaceMetadata indicates an expected call of LockNamespaceMetadata.
func (mr *MockTableCRUDMockRecorder) LockNamespaceMetadata(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockNamespaceMetadata", reflect.TypeOf((*MockTableCRUD)(nil).LockNamespaceMetadata), ctx)
}

// LockQueueMetadata mocks base method.
func (m *MockTableCRUD) LockQueueMetadata(ctx context.Context, filter QueueMetadataFilter) (*QueueMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockQueueMetadata", ctx, filter)
	ret0, _ := ret[0].(*QueueMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockQueueMetadata indicates an expected call of LockQueueMetadata.
func (mr *MockTableCRUDMockRecorder) LockQueueMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockQueueMetadata", reflect.TypeOf((*MockTableCRUD)(nil).LockQueueMetadata), ctx, filter)
}

// LockTaskQueues mocks base method.
func (m *MockTableCRUD) LockTaskQueues(ctx context.Context, filter TaskQueuesFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockTaskQueues", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockTaskQueues indicates an expected call of LockTaskQueues.
func (mr *MockTableCRUDMockRecorder) LockTaskQueues(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockTaskQueues", reflect.TypeOf((*MockTableCRUD)(nil).LockTaskQueues), ctx, filter)
}

// PaginateBranchesFromHistoryTree mocks base method.
func (m *MockTableCRUD) PaginateBranchesFromHistoryTree(ctx context.Context, filter HistoryTreeBranchPage) ([]HistoryTreeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginateBranchesFromHistoryTree", ctx, filter)
	ret0, _ := ret[0].([]HistoryTreeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaginateBranchesFromHistoryTree indicates an expected call of PaginateBranchesFromHistoryTree.
func (mr *MockTableCRUDMockRecorder) PaginateBranchesFromHistoryTree(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginateBranchesFromHistoryTree", reflect.TypeOf((*MockTableCRUD)(nil).PaginateBranchesFromHistoryTree), ctx, filter)
}

// PruneClusterMembership mocks base method.
func (m *MockTableCRUD) PruneClusterMembership(ctx context.Context, filter *PruneClusterMembershipFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneClusterMembership", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PruneClusterMembership indicates an expected call of PruneClusterMembership.
func (mr *MockTableCRUDMockRecorder) PruneClusterMembership(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneClusterMembership", reflect.TypeOf((*MockTableCRUD)(nil).PruneClusterMembership), ctx, filter)
}

// RangeDeleteFromHistoryImmediateTasks mocks base method.
func (m *MockTableCRUD) RangeDeleteFromHistoryImmediateTasks(ctx context.Context, filter HistoryImmediateTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromHistoryImmediateTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromHistoryImmediateTasks indicates an expected call of RangeDeleteFromHistoryImmediateTasks.
func (mr *MockTableCRUDMockRecorder) RangeDeleteFromHistoryImmediateTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromHistoryImmediateTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeDeleteFromHistoryImmediateTasks), ctx, filter)
}

// RangeDeleteFromHistoryNode mocks base method.
func (m *MockTableCRUD) RangeDeleteFromHistoryNode(ctx context.Context, filter HistoryNodeDeleteFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromHistoryNode", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromHistoryNode indicates an expected call of RangeDeleteFromHistoryNode.
func (mr *MockTableCRUDMockRecorder) RangeDeleteFromHistoryNode(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromHistoryNode", reflect.TypeOf((*MockTableCRUD)(nil).RangeDeleteFromHistoryNode), ctx, filter)
}

// RangeDeleteFromHistoryScheduledTasks mocks base method.
func (m *MockTableCRUD) RangeDeleteFromHistoryScheduledTasks(ctx context.Context, filter HistoryScheduledTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromHistoryScheduledTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromHistoryScheduledTasks indicates an expected call of RangeDeleteFromHistoryScheduledTasks.
func (mr *MockTableCRUDMockRecorder) RangeDeleteFromHistoryScheduledTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromHistoryScheduledTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeDeleteFromHistoryScheduledTasks), ctx, filter)
}

// RangeDeleteFromMessages mocks base method.
func (m *MockTableCRUD) RangeDeleteFromMessages(ctx context.Context, filter QueueMessagesRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromMessages", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromMessages indicates an expected call of RangeDeleteFromMessages.
func (mr *MockTableCRUDMockRecorder) RangeDeleteFromMessages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromMessages", reflect.TypeOf((*MockTableCRUD)(nil).RangeDeleteFromMessages), ctx, filter)
}

// RangeDeleteFromQueueV2Messages mocks base method.
func (m *MockTableCRUD) RangeDeleteFromQueueV2Messages(ctx context.Context, filter QueueV2MessagesFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromQueueV2Messages", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromQueueV2Messages indicates an expected call of RangeDeleteFromQueueV2Messages.
func (mr *MockTableCRUDMockRecorder) RangeDeleteFromQueueV2Messages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromQueueV2Messages", reflect.TypeOf((*MockTableCRUD)(nil).RangeDeleteFromQueueV2Messages), ctx, filter)
}

// RangeDeleteFromReplicationDLQTasks mocks base method.
func (m *MockTableCRUD) RangeDeleteFromReplicationDLQTasks(ctx context.Context, filter ReplicationDLQTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromReplicationDLQTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromReplicationDLQTasks indicates an expected call of RangeDeleteFromReplicationDLQTasks.
func (mr *MockTableCRUDMockRecorder) RangeDeleteFromReplicationDLQTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromReplicationDLQTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeDeleteFromReplicationDLQTasks), ctx, filter)
}

// RangeDeleteFromReplicationTasks mocks base method.
func (m *MockTableCRUD) RangeDeleteFromReplicationTasks(ctx context.Context, filter ReplicationTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromReplicationTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromReplicationTasks indicates an expected call of RangeDeleteFromReplicationTasks.
func (mr *MockTableCRUDMockRecorder) RangeDeleteFromReplicationTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromReplicationTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeDeleteFromReplicationTasks), ctx, filter)
}

// RangeDeleteFromTimerTasks mocks base method.
func (m *MockTableCRUD) RangeDeleteFromTimerTasks(ctx context.Context, filter TimerTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromTimerTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromTimerTasks indicates an expected call of RangeDeleteFromTimerTasks.
func (mr *MockTableCRUDMockRecorder) RangeDeleteFromTimerTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromTimerTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeDeleteFromTimerTasks), ctx, filter)
}

// RangeDeleteFromTransferTasks mocks base method.
func (m *MockTableCRUD) RangeDeleteFromTransferTasks(ctx context.Context, filter TransferTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromTransferTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromTransferTasks indicates an expected call of RangeDeleteFromTransferTasks.
func (mr *MockTableCRUDMockRecorder) RangeDeleteFromTransferTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromTransferTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeDeleteFromTransferTasks), ctx, filter)
}

// RangeDeleteFromVisibilityTasks mocks base method.
func (m *MockTableCRUD) RangeDeleteFromVisibilityTasks(ctx context.Context, filter VisibilityTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromVisibilityTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromVisibilityTasks indicates an expected call of RangeDeleteFromVisibilityTasks.
func (mr *MockTableCRUDMockRecorder) RangeDeleteFromVisibilityTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromVisibilityTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeDeleteFromVisibilityTasks), ctx, filter)
}

// RangeSelectFromHistoryImmediateTasks mocks base method.
func (m *MockTableCRUD) RangeSelectFromHistoryImmediateTasks(ctx context.Context, filter HistoryImmediateTasksRangeFilter) ([]HistoryImmediateTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromHistoryImmediateTasks", ctx, filter)
	ret0, _ := ret[0].([]HistoryImmediateTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromHistoryImmediateTasks indicates an expected call of RangeSelectFromHistoryImmediateTasks.
func (mr *MockTableCRUDMockRecorder) RangeSelectFromHistoryImmediateTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromHistoryImmediateTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeSelectFromHistoryImmediateTasks), ctx, filter)
}

// RangeSelectFromHistoryNode mocks base method.
func (m *MockTableCRUD) RangeSelectFromHistoryNode(ctx context.Context, filter HistoryNodeSelectFilter) ([]HistoryNodeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromHistoryNode", ctx, filter)
	ret0, _ := ret[0].([]HistoryNodeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromHistoryNode indicates an expected call of RangeSelectFromHistoryNode.
func (mr *MockTableCRUDMockRecorder) RangeSelectFromHistoryNode(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromHistoryNode", reflect.TypeOf((*MockTableCRUD)(nil).RangeSelectFromHistoryNode), ctx, filter)
}

// RangeSelectFromHistoryScheduledTasks mocks base method.
func (m *MockTableCRUD) RangeSelectFromHistoryScheduledTasks(ctx context.Context, filter HistoryScheduledTasksRangeFilter) ([]HistoryScheduledTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromHistoryScheduledTasks", ctx, filter)
	ret0, _ := ret[0].([]HistoryScheduledTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromHistoryScheduledTasks indicates an expected call of RangeSelectFromHistoryScheduledTasks.
func (mr *MockTableCRUDMockRecorder) RangeSelectFromHistoryScheduledTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromHistoryScheduledTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeSelectFromHistoryScheduledTasks), ctx, filter)
}

// RangeSelectFromMessages mocks base method.
func (m *MockTableCRUD) RangeSelectFromMessages(ctx context.Context, filter QueueMessagesRangeFilter) ([]QueueMessageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromMessages", ctx, filter)
	ret0, _ := ret[0].([]QueueMessageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromMessages indicates an expected call of RangeSelectFromMessages.
func (mr *MockTableCRUDMockRecorder) RangeSelectFromMessages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromMessages", reflect.TypeOf((*MockTableCRUD)(nil).RangeSelectFromMessages), ctx, filter)
}

// RangeSelectFromQueueV2Messages mocks base method.
func (m *MockTableCRUD) RangeSelectFromQueueV2Messages(ctx context.Context, filter QueueV2MessagesFilter) ([]QueueV2MessageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromQueueV2Messages", ctx, filter)
	ret0, _ := ret[0].([]QueueV2MessageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromQueueV2Messages indicates an expected call of RangeSelectFromQueueV2Messages.
func (mr *MockTableCRUDMockRecorder) RangeSelectFromQueueV2Messages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromQueueV2Messages", reflect.TypeOf((*MockTableCRUD)(nil).RangeSelectFromQueueV2Messages), ctx, filter)
}

// RangeSelectFromReplicationDLQTasks mocks base method.
func (m *MockTableCRUD) RangeSelectFromReplicationDLQTasks(ctx context.Context, filter ReplicationDLQTasksRangeFilter) ([]ReplicationDLQTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromReplicationDLQTasks", ctx, filter)
	ret0, _ := ret[0].([]ReplicationDLQTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromReplicationDLQTasks indicates an expected call of RangeSelectFromReplicationDLQTasks.
func (mr *MockTableCRUDMockRecorder) RangeSelectFromReplicationDLQTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromReplicationDLQTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeSelectFromReplicationDLQTasks), ctx, filter)
}

// RangeSelectFromReplicationTasks mocks base method.
func (m *MockTableCRUD) RangeSelectFromReplicationTasks(ctx context.Context, filter ReplicationTasksRangeFilter) ([]ReplicationTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromReplicationTasks", ctx, filter)
	ret0, _ := ret[0].([]ReplicationTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromReplicationTasks indicates an expected call of RangeSelectFromReplicationTasks.
func (mr *MockTableCRUDMockRecorder) RangeSelectFromReplicationTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromReplicationTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeSelectFromReplicationTasks), ctx, filter)
}

// RangeSelectFromTimerTasks mocks base method.
func (m *MockTableCRUD) RangeSelectFromTimerTasks(ctx context.Context, filter TimerTasksRangeFilter) ([]TimerTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromTimerTasks", ctx, filter)
	ret0, _ := ret[0].([]TimerTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromTimerTasks indicates an expected call of RangeSelectFromTimerTasks.
func (mr *MockTableCRUDMockRecorder) RangeSelectFromTimerTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromTimerTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeSelectFromTimerTasks), ctx, filter)
}

// RangeSelectFromTransferTasks mocks base method.
func (m *MockTableCRUD) RangeSelectFromTransferTasks(ctx context.Context, filter TransferTasksRangeFilter) ([]TransferTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromTransferTasks", ctx, filter)
	ret0, _ := ret[0].([]TransferTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromTransferTasks indicates an expected call of RangeSelectFromTransferTasks.
func (mr *MockTableCRUDMockRecorder) RangeSelectFromTransferTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromTransferTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeSelectFromTransferTasks), ctx, filter)
}

// RangeSelectFromVisibilityTasks mocks base method.
func (m *MockTableCRUD) RangeSelectFromVisibilityTasks(ctx context.Context, filter VisibilityTasksRangeFilter) ([]VisibilityTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromVisibilityTasks", ctx, filter)
	ret0, _ := ret[0].([]VisibilityTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromVisibilityTasks indicates an expected call of RangeSelectFromVisibilityTasks.
func (mr *MockTableCRUDMockRecorder) RangeSelectFromVisibilityTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromVisibilityTasks", reflect.TypeOf((*MockTableCRUD)(nil).RangeSelectFromVisibilityTasks), ctx, filter)
}

// ReadLockExecutions mocks base method.
func (m *MockTableCRUD) ReadLockExecutions(ctx context.Context, filter ExecutionsFilter) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLockExecutions", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadLockExecutions indicates an expected call of ReadLockExecutions.
func (mr *MockTableCRUDMockRecorder) ReadLockExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLockExecutions", reflect.TypeOf((*MockTableCRUD)(nil).ReadLockExecutions), ctx, filter)
}

// ReadLockShards mocks base method.
func (m *MockTableCRUD) ReadLockShards(ctx context.Context, filter ShardsFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLockShards", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLockShards indicates an expected call of ReadLockShards.
func (mr *MockTableCRUDMockRecorder) ReadLockShards(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLockShards", reflect.TypeOf((*MockTableCRUD)(nil).ReadLockShards), ctx, filter)
}

// RemoveFromBuildIdToTaskQueueMapping mocks base method.
func (m *MockTableCRUD) RemoveFromBuildIdToTaskQueueMapping(ctx context.Context, request RemoveFromBuildIdToTaskQueueMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromBuildIdToTaskQueueMapping", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromBuildIdToTaskQueueMapping indicates an expected call of RemoveFromBuildIdToTaskQueueMapping.
func (mr *MockTableCRUDMockRecorder) RemoveFromBuildIdToTaskQueueMapping(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromBuildIdToTaskQueueMapping", reflect.TypeOf((*MockTableCRUD)(nil).RemoveFromBuildIdToTaskQueueMapping), ctx, request)
}

// ReplaceIntoActivityInfoMaps mocks base method.
func (m *MockTableCRUD) ReplaceIntoActivityInfoMaps(ctx context.Context, rows []ActivityInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoActivityInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoActivityInfoMaps indicates an expected call of ReplaceIntoActivityInfoMaps.
func (mr *MockTableCRUDMockRecorder) ReplaceIntoActivityInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoActivityInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).ReplaceIntoActivityInfoMaps), ctx, rows)
}

// ReplaceIntoChildExecutionInfoMaps mocks base method.
func (m *MockTableCRUD) ReplaceIntoChildExecutionInfoMaps(ctx context.Context, rows []ChildExecutionInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoChildExecutionInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoChildExecutionInfoMaps indicates an expected call of ReplaceIntoChildExecutionInfoMaps.
func (mr *MockTableCRUDMockRecorder) ReplaceIntoChildExecutionInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoChildExecutionInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).ReplaceIntoChildExecutionInfoMaps), ctx, rows)
}

// ReplaceIntoRequestCancelInfoMaps mocks base method.
func (m *MockTableCRUD) ReplaceIntoRequestCancelInfoMaps(ctx context.Context, rows []RequestCancelInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoRequestCancelInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoRequestCancelInfoMaps indicates an expected call of ReplaceIntoRequestCancelInfoMaps.
func (mr *MockTableCRUDMockRecorder) ReplaceIntoRequestCancelInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoRequestCancelInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).ReplaceIntoRequestCancelInfoMaps), ctx, rows)
}

// ReplaceIntoSignalInfoMaps mocks base method.
func (m *MockTableCRUD) ReplaceIntoSignalInfoMaps(ctx context.Context, rows []SignalInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoSignalInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoSignalInfoMaps indicates an expected call of ReplaceIntoSignalInfoMaps.
func (mr *MockTableCRUDMockRecorder) ReplaceIntoSignalInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoSignalInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).ReplaceIntoSignalInfoMaps), ctx, rows)
}

// ReplaceIntoSignalsRequestedSets mocks base method.
func (m *MockTableCRUD) ReplaceIntoSignalsRequestedSets(ctx context.Context, rows []SignalsRequestedSetsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoSignalsRequestedSets", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoSignalsRequestedSets indicates an expected call of ReplaceIntoSignalsRequestedSets.
func (mr *MockTableCRUDMockRecorder) ReplaceIntoSignalsRequestedSets(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoSignalsRequestedSets", reflect.TypeOf((*MockTableCRUD)(nil).ReplaceIntoSignalsRequestedSets), ctx, rows)
}

// ReplaceIntoTimerInfoMaps mocks base method.
func (m *MockTableCRUD) ReplaceIntoTimerInfoMaps(ctx context.Context, rows []TimerInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoTimerInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoTimerInfoMaps indicates an expected call of ReplaceIntoTimerInfoMaps.
func (mr *MockTableCRUDMockRecorder) ReplaceIntoTimerInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoTimerInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).ReplaceIntoTimerInfoMaps), ctx, rows)
}

// ReplaceIntoVisibility mocks base method.
func (m *MockTableCRUD) ReplaceIntoVisibility(ctx context.Context, row *VisibilityRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoVisibility", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoVisibility indicates an expected call of ReplaceIntoVisibility.
func (mr *MockTableCRUDMockRecorder) ReplaceIntoVisibility(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoVisibility", reflect.TypeOf((*MockTableCRUD)(nil).ReplaceIntoVisibility), ctx, row)
}

// SaveClusterMetadata mocks base method.
func (m *MockTableCRUD) SaveClusterMetadata(ctx context.Context, row *ClusterMetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveClusterMetadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveClusterMetadata indicates an expected call of SaveClusterMetadata.
func (mr *MockTableCRUDMockRecorder) SaveClusterMetadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveClusterMetadata", reflect.TypeOf((*MockTableCRUD)(nil).SaveClusterMetadata), ctx, row)
}

// SelectAllFromActivityInfoMaps mocks base method.
func (m *MockTableCRUD) SelectAllFromActivityInfoMaps(ctx context.Context, filter ActivityInfoMapsAllFilter) ([]ActivityInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromActivityInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]ActivityInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromActivityInfoMaps indicates an expected call of SelectAllFromActivityInfoMaps.
func (mr *MockTableCRUDMockRecorder) SelectAllFromActivityInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromActivityInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).SelectAllFromActivityInfoMaps), ctx, filter)
}

// SelectAllFromChildExecutionInfoMaps mocks base method.
func (m *MockTableCRUD) SelectAllFromChildExecutionInfoMaps(ctx context.Context, filter ChildExecutionInfoMapsAllFilter) ([]ChildExecutionInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromChildExecutionInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]ChildExecutionInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromChildExecutionInfoMaps indicates an expected call of SelectAllFromChildExecutionInfoMaps.
func (mr *MockTableCRUDMockRecorder) SelectAllFromChildExecutionInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromChildExecutionInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).SelectAllFromChildExecutionInfoMaps), ctx, filter)
}

// SelectAllFromRequestCancelInfoMaps mocks base method.
func (m *MockTableCRUD) SelectAllFromRequestCancelInfoMaps(ctx context.Context, filter RequestCancelInfoMapsAllFilter) ([]RequestCancelInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromRequestCancelInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]RequestCancelInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromRequestCancelInfoMaps indicates an expected call of SelectAllFromRequestCancelInfoMaps.
func (mr *MockTableCRUDMockRecorder) SelectAllFromRequestCancelInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromRequestCancelInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).SelectAllFromRequestCancelInfoMaps), ctx, filter)
}

// SelectAllFromSignalInfoMaps mocks base method.
func (m *MockTableCRUD) SelectAllFromSignalInfoMaps(ctx context.Context, filter SignalInfoMapsAllFilter) ([]SignalInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromSignalInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]SignalInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromSignalInfoMaps indicates an expected call of SelectAllFromSignalInfoMaps.
func (mr *MockTableCRUDMockRecorder) SelectAllFromSignalInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromSignalInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).SelectAllFromSignalInfoMaps), ctx, filter)
}

// SelectAllFromSignalsRequestedSets mocks base method.
func (m *MockTableCRUD) SelectAllFromSignalsRequestedSets(ctx context.Context, filter SignalsRequestedSetsAllFilter) ([]SignalsRequestedSetsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromSignalsRequestedSets", ctx, filter)
	ret0, _ := ret[0].([]SignalsRequestedSetsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromSignalsRequestedSets indicates an expected call of SelectAllFromSignalsRequestedSets.
func (mr *MockTableCRUDMockRecorder) SelectAllFromSignalsRequestedSets(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromSignalsRequestedSets", reflect.TypeOf((*MockTableCRUD)(nil).SelectAllFromSignalsRequestedSets), ctx, filter)
}

// SelectAllFromTimerInfoMaps mocks base method.
func (m *MockTableCRUD) SelectAllFromTimerInfoMaps(ctx context.Context, filter TimerInfoMapsAllFilter) ([]TimerInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromTimerInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]TimerInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromTimerInfoMaps indicates an expected call of SelectAllFromTimerInfoMaps.
func (mr *MockTableCRUDMockRecorder) SelectAllFromTimerInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromTimerInfoMaps", reflect.TypeOf((*MockTableCRUD)(nil).SelectAllFromTimerInfoMaps), ctx, filter)
}

// SelectFromBufferedEvents mocks base method.
func (m *MockTableCRUD) SelectFromBufferedEvents(ctx context.Context, filter BufferedEventsFilter) ([]BufferedEventsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromBufferedEvents", ctx, filter)
	ret0, _ := ret[0].([]BufferedEventsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromBufferedEvents indicates an expected call of SelectFromBufferedEvents.
func (mr *MockTableCRUDMockRecorder) SelectFromBufferedEvents(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromBufferedEvents", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromBufferedEvents), ctx, filter)
}

// SelectFromCurrentExecutions mocks base method.
func (m *MockTableCRUD) SelectFromCurrentExecutions(ctx context.Context, filter CurrentExecutionsFilter) (*CurrentExecutionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromCurrentExecutions", ctx, filter)
	ret0, _ := ret[0].(*CurrentExecutionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromCurrentExecutions indicates an expected call of SelectFromCurrentExecutions.
func (mr *MockTableCRUDMockRecorder) SelectFromCurrentExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromCurrentExecutions", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromCurrentExecutions), ctx, filter)
}

// SelectFromExecutions mocks base method.
func (m *MockTableCRUD) SelectFromExecutions(ctx context.Context, filter ExecutionsFilter) (*ExecutionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromExecutions", ctx, filter)
	ret0, _ := ret[0].(*ExecutionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromExecutions indicates an expected call of SelectFromExecutions.
func (mr *MockTableCRUDMockRecorder) SelectFromExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromExecutions", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromExecutions), ctx, filter)
}

// SelectFromHistoryTree mocks base method.
func (m *MockTableCRUD) SelectFromHistoryTree(ctx context.Context, filter HistoryTreeSelectFilter) ([]HistoryTreeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromHistoryTree", ctx, filter)
	ret0, _ := ret[0].([]HistoryTreeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromHistoryTree indicates an expected call of SelectFromHistoryTree.
func (mr *MockTableCRUDMockRecorder) SelectFromHistoryTree(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromHistoryTree", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromHistoryTree), ctx, filter)
}

// SelectFromMessages mocks base method.
func (m *MockTableCRUD) SelectFromMessages(ctx context.Context, filter QueueMessagesFilter) ([]QueueMessageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromMessages", ctx, filter)
	ret0, _ := ret[0].([]QueueMessageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromMessages indicates an expected call of SelectFromMessages.
func (mr *MockTableCRUDMockRecorder) SelectFromMessages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromMessages", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromMessages), ctx, filter)
}

// SelectFromNamespace mocks base method.
func (m *MockTableCRUD) SelectFromNamespace(ctx context.Context, filter NamespaceFilter) ([]NamespaceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromNamespace", ctx, filter)
	ret0, _ := ret[0].([]NamespaceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromNamespace indicates an expected call of SelectFromNamespace.
func (mr *MockTableCRUDMockRecorder) SelectFromNamespace(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromNamespace", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromNamespace), ctx, filter)
}

// SelectFromNamespaceMetadata mocks base method.
func (m *MockTableCRUD) SelectFromNamespaceMetadata(ctx context.Context) (*NamespaceMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromNamespaceMetadata", ctx)
	ret0, _ := ret[0].(*NamespaceMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromNamespaceMetadata indicates an expected call of SelectFromNamespaceMetadata.
func (mr *MockTableCRUDMockRecorder) SelectFromNamespaceMetadata(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromNamespaceMetadata", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromNamespaceMetadata), ctx)
}

// SelectFromQueueMetadata mocks base method.
func (m *MockTableCRUD) SelectFromQueueMetadata(ctx context.Context, filter QueueMetadataFilter) (*QueueMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromQueueMetadata", ctx, filter)
	ret0, _ := ret[0].(*QueueMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromQueueMetadata indicates an expected call of SelectFromQueueMetadata.
func (mr *MockTableCRUDMockRecorder) SelectFromQueueMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromQueueMetadata", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromQueueMetadata), ctx, filter)
}

// SelectFromQueueV2Metadata mocks base method.
func (m *MockTableCRUD) SelectFromQueueV2Metadata(ctx context.Context, filter QueueV2MetadataFilter) (*QueueV2MetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromQueueV2Metadata", ctx, filter)
	ret0, _ := ret[0].(*QueueV2MetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromQueueV2Metadata indicates an expected call of SelectFromQueueV2Metadata.
func (mr *MockTableCRUDMockRecorder) SelectFromQueueV2Metadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromQueueV2Metadata", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromQueueV2Metadata), ctx, filter)
}

// SelectFromQueueV2MetadataForUpdate mocks base method.
func (m *MockTableCRUD) SelectFromQueueV2MetadataForUpdate(ctx context.Context, filter QueueV2MetadataFilter) (*QueueV2MetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromQueueV2MetadataForUpdate", ctx, filter)
	ret0, _ := ret[0].(*QueueV2MetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromQueueV2MetadataForUpdate indicates an expected call of SelectFromQueueV2MetadataForUpdate.
func (mr *MockTableCRUDMockRecorder) SelectFromQueueV2MetadataForUpdate(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromQueueV2MetadataForUpdate", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromQueueV2MetadataForUpdate), ctx, filter)
}

// SelectFromShards mocks base method.
func (m *MockTableCRUD) SelectFromShards(ctx context.Context, filter ShardsFilter) (*ShardsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromShards", ctx, filter)
	ret0, _ := ret[0].(*ShardsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromShards indicates an expected call of SelectFromShards.
func (mr *MockTableCRUDMockRecorder) SelectFromShards(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromShards", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromShards), ctx, filter)
}

// SelectFromTaskQueues mocks base method.
func (m *MockTableCRUD) SelectFromTaskQueues(ctx context.Context, filter TaskQueuesFilter) ([]TaskQueuesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromTaskQueues", ctx, filter)
	ret0, _ := ret[0].([]TaskQueuesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromTaskQueues indicates an expected call of SelectFromTaskQueues.
func (mr *MockTableCRUDMockRecorder) SelectFromTaskQueues(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromTaskQueues", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromTaskQueues), ctx, filter)
}

// SelectFromTasks mocks base method.
func (m *MockTableCRUD) SelectFromTasks(ctx context.Context, filter TasksFilter) ([]TasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromTasks", ctx, filter)
	ret0, _ := ret[0].([]TasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromTasks indicates an expected call of SelectFromTasks.
func (mr *MockTableCRUDMockRecorder) SelectFromTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromTasks", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromTasks), ctx, filter)
}

// SelectFromVisibility mocks base method.
func (m *MockTableCRUD) SelectFromVisibility(ctx context.Context, filter VisibilitySelectFilter) ([]VisibilityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromVisibility", ctx, filter)
	ret0, _ := ret[0].([]VisibilityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromVisibility indicates an expected call of SelectFromVisibility.
func (mr *MockTableCRUDMockRecorder) SelectFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromVisibility", reflect.TypeOf((*MockTableCRUD)(nil).SelectFromVisibility), ctx, filter)
}

// SelectNameFromQueueV2Metadata mocks base method.
func (m *MockTableCRUD) SelectNameFromQueueV2Metadata(ctx context.Context, filter QueueV2MetadataTypeFilter) ([]QueueV2MetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectNameFromQueueV2Metadata", ctx, filter)
	ret0, _ := ret[0].([]QueueV2MetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectNameFromQueueV2Metadata indicates an expected call of SelectNameFromQueueV2Metadata.
func (mr *MockTableCRUDMockRecorder) SelectNameFromQueueV2Metadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectNameFromQueueV2Metadata", reflect.TypeOf((*MockTableCRUD)(nil).SelectNameFromQueueV2Metadata), ctx, filter)
}

// UpdateCurrentExecutions mocks base method.
func (m *MockTableCRUD) UpdateCurrentExecutions(ctx context.Context, row *CurrentExecutionsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrentExecutions", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCurrentExecutions indicates an expected call of UpdateCurrentExecutions.
func (mr *MockTableCRUDMockRecorder) UpdateCurrentExecutions(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrentExecutions", reflect.TypeOf((*MockTableCRUD)(nil).UpdateCurrentExecutions), ctx, row)
}

// UpdateExecutions mocks base method.
func (m *MockTableCRUD) UpdateExecutions(ctx context.Context, row *ExecutionsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExecutions", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExecutions indicates an expected call of UpdateExecutions.
func (mr *MockTableCRUDMockRecorder) UpdateExecutions(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExecutions", reflect.TypeOf((*MockTableCRUD)(nil).UpdateExecutions), ctx, row)
}

// UpdateNamespace mocks base method.
func (m *MockTableCRUD) UpdateNamespace(ctx context.Context, row *NamespaceRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespace", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespace indicates an expected call of UpdateNamespace.
func (mr *MockTableCRUDMockRecorder) UpdateNamespace(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockTableCRUD)(nil).UpdateNamespace), ctx, row)
}

// UpdateNamespaceMetadata mocks base method.
func (m *MockTableCRUD) UpdateNamespaceMetadata(ctx context.Context, row *NamespaceMetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespaceMetadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespaceMetadata indicates an expected call of UpdateNamespaceMetadata.
func (mr *MockTableCRUDMockRecorder) UpdateNamespaceMetadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceMetadata", reflect.TypeOf((*MockTableCRUD)(nil).UpdateNamespaceMetadata), ctx, row)
}

// UpdateNexusEndpoint mocks base method.
func (m *MockTableCRUD) UpdateNexusEndpoint(ctx context.Context, row *NexusEndpointsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNexusEndpoint", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNexusEndpoint indicates an expected call of UpdateNexusEndpoint.
func (mr *MockTableCRUDMockRecorder) UpdateNexusEndpoint(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNexusEndpoint", reflect.TypeOf((*MockTableCRUD)(nil).UpdateNexusEndpoint), ctx, row)
}

// UpdateQueueMetadata mocks base method.
func (m *MockTableCRUD) UpdateQueueMetadata(ctx context.Context, row *QueueMetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueMetadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueueMetadata indicates an expected call of UpdateQueueMetadata.
func (mr *MockTableCRUDMockRecorder) UpdateQueueMetadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueMetadata", reflect.TypeOf((*MockTableCRUD)(nil).UpdateQueueMetadata), ctx, row)
}

// UpdateQueueV2Metadata mocks base method.
func (m *MockTableCRUD) UpdateQueueV2Metadata(ctx context.Context, row *QueueV2MetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueV2Metadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueueV2Metadata indicates an expected call of UpdateQueueV2Metadata.
func (mr *MockTableCRUDMockRecorder) UpdateQueueV2Metadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueV2Metadata", reflect.TypeOf((*MockTableCRUD)(nil).UpdateQueueV2Metadata), ctx, row)
}

// UpdateShards mocks base method.
func (m *MockTableCRUD) UpdateShards(ctx context.Context, row *ShardsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShards", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShards indicates an expected call of UpdateShards.
func (mr *MockTableCRUDMockRecorder) UpdateShards(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShards", reflect.TypeOf((*MockTableCRUD)(nil).UpdateShards), ctx, row)
}

// UpdateTaskQueueUserData mocks base method.
func (m *MockTableCRUD) UpdateTaskQueueUserData(ctx context.Context, request *UpdateTaskQueueDataRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskQueueUserData", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskQueueUserData indicates an expected call of UpdateTaskQueueUserData.
func (mr *MockTableCRUDMockRecorder) UpdateTaskQueueUserData(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskQueueUserData", reflect.TypeOf((*MockTableCRUD)(nil).UpdateTaskQueueUserData), ctx, request)
}

// UpdateTaskQueues mocks base method.
func (m *MockTableCRUD) UpdateTaskQueues(ctx context.Context, row *TaskQueuesRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskQueues", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskQueues indicates an expected call of UpdateTaskQueues.
func (mr *MockTableCRUDMockRecorder) UpdateTaskQueues(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskQueues", reflect.TypeOf((*MockTableCRUD)(nil).UpdateTaskQueues), ctx, row)
}

// UpsertClusterMembership mocks base method.
func (m *MockTableCRUD) UpsertClusterMembership(ctx context.Context, row *ClusterMembershipRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertClusterMembership", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertClusterMembership indicates an expected call of UpsertClusterMembership.
func (mr *MockTableCRUDMockRecorder) UpsertClusterMembership(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertClusterMembership", reflect.TypeOf((*MockTableCRUD)(nil).UpsertClusterMembership), ctx, row)
}

// WriteLockExecutions mocks base method.
func (m *MockTableCRUD) WriteLockExecutions(ctx context.Context, filter ExecutionsFilter) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLockExecutions", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WriteLockExecutions indicates an expected call of WriteLockExecutions.
func (mr *MockTableCRUDMockRecorder) WriteLockExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLockExecutions", reflect.TypeOf((*MockTableCRUD)(nil).WriteLockExecutions), ctx, filter)
}

// WriteLockGetClusterMetadata mocks base method.
func (m *MockTableCRUD) WriteLockGetClusterMetadata(ctx context.Context, filter *ClusterMetadataFilter) (*ClusterMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLockGetClusterMetadata", ctx, filter)
	ret0, _ := ret[0].(*ClusterMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteLockGetClusterMetadata indicates an expected call of WriteLockGetClusterMetadata.
func (mr *MockTableCRUDMockRecorder) WriteLockGetClusterMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLockGetClusterMetadata", reflect.TypeOf((*MockTableCRUD)(nil).WriteLockGetClusterMetadata), ctx, filter)
}

// WriteLockShards mocks base method.
func (m *MockTableCRUD) WriteLockShards(ctx context.Context, filter ShardsFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLockShards", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteLockShards indicates an expected call of WriteLockShards.
func (mr *MockTableCRUDMockRecorder) WriteLockShards(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLockShards", reflect.TypeOf((*MockTableCRUD)(nil).WriteLockShards), ctx, filter)
}

// MockAdminCRUD is a mock of AdminCRUD interface.
type MockAdminCRUD struct {
	ctrl     *gomock.Controller
	recorder *MockAdminCRUDMockRecorder
}

// MockAdminCRUDMockRecorder is the mock recorder for MockAdminCRUD.
type MockAdminCRUDMockRecorder struct {
	mock *MockAdminCRUD
}

// NewMockAdminCRUD creates a new mock instance.
func NewMockAdminCRUD(ctrl *gomock.Controller) *MockAdminCRUD {
	mock := &MockAdminCRUD{ctrl: ctrl}
	mock.recorder = &MockAdminCRUDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminCRUD) EXPECT() *MockAdminCRUDMockRecorder {
	return m.recorder
}

// CreateDatabase mocks base method.
func (m *MockAdminCRUD) CreateDatabase(database string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", database)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockAdminCRUDMockRecorder) CreateDatabase(database interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockAdminCRUD)(nil).CreateDatabase), database)
}

// CreateSchemaVersionTables mocks base method.
func (m *MockAdminCRUD) CreateSchemaVersionTables() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchemaVersionTables")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchemaVersionTables indicates an expected call of CreateSchemaVersionTables.
func (mr *MockAdminCRUDMockRecorder) CreateSchemaVersionTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaVersionTables", reflect.TypeOf((*MockAdminCRUD)(nil).CreateSchemaVersionTables))
}

// DropAllTables mocks base method.
func (m *MockAdminCRUD) DropAllTables(database string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropAllTables", database)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropAllTables indicates an expected call of DropAllTables.
func (mr *MockAdminCRUDMockRecorder) DropAllTables(database interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAllTables", reflect.TypeOf((*MockAdminCRUD)(nil).DropAllTables), database)
}

// DropDatabase mocks base method.
func (m *MockAdminCRUD) DropDatabase(database string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDatabase", database)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDatabase indicates an expected call of DropDatabase.
func (mr *MockAdminCRUDMockRecorder) DropDatabase(database interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabase", reflect.TypeOf((*MockAdminCRUD)(nil).DropDatabase), database)
}

// DropTable mocks base method.
func (m *MockAdminCRUD) DropTable(table string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTable", table)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable.
func (mr *MockAdminCRUDMockRecorder) DropTable(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockAdminCRUD)(nil).DropTable), table)
}

// Exec mocks base method.
func (m *MockAdminCRUD) Exec(stmt string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{stmt}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockAdminCRUDMockRecorder) Exec(stmt interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stmt}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockAdminCRUD)(nil).Exec), varargs...)
}

// ListTables mocks base method.
func (m *MockAdminCRUD) ListTables(database string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables", database)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables.
func (mr *MockAdminCRUDMockRecorder) ListTables(database interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockAdminCRUD)(nil).ListTables), database)
}

// ReadSchemaVersion mocks base method.
func (m *MockAdminCRUD) ReadSchemaVersion(database string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSchemaVersion", database)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSchemaVersion indicates an expected call of ReadSchemaVersion.
func (mr *MockAdminCRUDMockRecorder) ReadSchemaVersion(database interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSchemaVersion", reflect.TypeOf((*MockAdminCRUD)(nil).ReadSchemaVersion), database)
}

// UpdateSchemaVersion mocks base method.
func (m *MockAdminCRUD) UpdateSchemaVersion(database, newVersion, minCompatibleVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchemaVersion", database, newVersion, minCompatibleVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchemaVersion indicates an expected call of UpdateSchemaVersion.
func (mr *MockAdminCRUDMockRecorder) UpdateSchemaVersion(database, newVersion, minCompatibleVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchemaVersion", reflect.TypeOf((*MockAdminCRUD)(nil).UpdateSchemaVersion), database, newVersion, minCompatibleVersion)
}

// WriteSchemaUpdateLog mocks base method.
func (m *MockAdminCRUD) WriteSchemaUpdateLog(oldVersion, newVersion, manifestMD5, desc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSchemaUpdateLog", oldVersion, newVersion, manifestMD5, desc)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSchemaUpdateLog indicates an expected call of WriteSchemaUpdateLog.
func (mr *MockAdminCRUDMockRecorder) WriteSchemaUpdateLog(oldVersion, newVersion, manifestMD5, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSchemaUpdateLog", reflect.TypeOf((*MockAdminCRUD)(nil).WriteSchemaUpdateLog), oldVersion, newVersion, manifestMD5, desc)
}

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// AddToBuildIdToTaskQueueMapping mocks base method.
func (m *MockTx) AddToBuildIdToTaskQueueMapping(ctx context.Context, request AddToBuildIdToTaskQueueMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBuildIdToTaskQueueMapping", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBuildIdToTaskQueueMapping indicates an expected call of AddToBuildIdToTaskQueueMapping.
func (mr *MockTxMockRecorder) AddToBuildIdToTaskQueueMapping(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBuildIdToTaskQueueMapping", reflect.TypeOf((*MockTx)(nil).AddToBuildIdToTaskQueueMapping), ctx, request)
}

// Commit mocks base method.
func (m *MockTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit))
}

// CountFromVisibility mocks base method.
func (m *MockTx) CountFromVisibility(ctx context.Context, filter VisibilitySelectFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFromVisibility", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFromVisibility indicates an expected call of CountFromVisibility.
func (mr *MockTxMockRecorder) CountFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFromVisibility", reflect.TypeOf((*MockTx)(nil).CountFromVisibility), ctx, filter)
}

// CountGroupByFromVisibility mocks base method.
func (m *MockTx) CountGroupByFromVisibility(ctx context.Context, filter VisibilitySelectFilter) ([]VisibilityCountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountGroupByFromVisibility", ctx, filter)
	ret0, _ := ret[0].([]VisibilityCountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountGroupByFromVisibility indicates an expected call of CountGroupByFromVisibility.
func (mr *MockTxMockRecorder) CountGroupByFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountGroupByFromVisibility", reflect.TypeOf((*MockTx)(nil).CountGroupByFromVisibility), ctx, filter)
}

// CountTaskQueuesByBuildId mocks base method.
func (m *MockTx) CountTaskQueuesByBuildId(ctx context.Context, request *CountTaskQueuesByBuildIdRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTaskQueuesByBuildId", ctx, request)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTaskQueuesByBuildId indicates an expected call of CountTaskQueuesByBuildId.
func (mr *MockTxMockRecorder) CountTaskQueuesByBuildId(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTaskQueuesByBuildId", reflect.TypeOf((*MockTx)(nil).CountTaskQueuesByBuildId), ctx, request)
}

// DeleteAllFromActivityInfoMaps mocks base method.
func (m *MockTx) DeleteAllFromActivityInfoMaps(ctx context.Context, filter ActivityInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromActivityInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromActivityInfoMaps indicates an expected call of DeleteAllFromActivityInfoMaps.
func (mr *MockTxMockRecorder) DeleteAllFromActivityInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromActivityInfoMaps", reflect.TypeOf((*MockTx)(nil).DeleteAllFromActivityInfoMaps), ctx, filter)
}

// DeleteAllFromChildExecutionInfoMaps mocks base method.
func (m *MockTx) DeleteAllFromChildExecutionInfoMaps(ctx context.Context, filter ChildExecutionInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromChildExecutionInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromChildExecutionInfoMaps indicates an expected call of DeleteAllFromChildExecutionInfoMaps.
func (mr *MockTxMockRecorder) DeleteAllFromChildExecutionInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromChildExecutionInfoMaps", reflect.TypeOf((*MockTx)(nil).DeleteAllFromChildExecutionInfoMaps), ctx, filter)
}

// DeleteAllFromRequestCancelInfoMaps mocks base method.
func (m *MockTx) DeleteAllFromRequestCancelInfoMaps(ctx context.Context, filter RequestCancelInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromRequestCancelInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromRequestCancelInfoMaps indicates an expected call of DeleteAllFromRequestCancelInfoMaps.
func (mr *MockTxMockRecorder) DeleteAllFromRequestCancelInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromRequestCancelInfoMaps", reflect.TypeOf((*MockTx)(nil).DeleteAllFromRequestCancelInfoMaps), ctx, filter)
}

// DeleteAllFromSignalInfoMaps mocks base method.
func (m *MockTx) DeleteAllFromSignalInfoMaps(ctx context.Context, filter SignalInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromSignalInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromSignalInfoMaps indicates an expected call of DeleteAllFromSignalInfoMaps.
func (mr *MockTxMockRecorder) DeleteAllFromSignalInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromSignalInfoMaps", reflect.TypeOf((*MockTx)(nil).DeleteAllFromSignalInfoMaps), ctx, filter)
}

// DeleteAllFromSignalsRequestedSets mocks base method.
func (m *MockTx) DeleteAllFromSignalsRequestedSets(ctx context.Context, filter SignalsRequestedSetsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromSignalsRequestedSets", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromSignalsRequestedSets indicates an expected call of DeleteAllFromSignalsRequestedSets.
func (mr *MockTxMockRecorder) DeleteAllFromSignalsRequestedSets(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromSignalsRequestedSets", reflect.TypeOf((*MockTx)(nil).DeleteAllFromSignalsRequestedSets), ctx, filter)
}

// DeleteAllFromTimerInfoMaps mocks base method.
func (m *MockTx) DeleteAllFromTimerInfoMaps(ctx context.Context, filter TimerInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromTimerInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromTimerInfoMaps indicates an expected call of DeleteAllFromTimerInfoMaps.
func (mr *MockTxMockRecorder) DeleteAllFromTimerInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromTimerInfoMaps", reflect.TypeOf((*MockTx)(nil).DeleteAllFromTimerInfoMaps), ctx, filter)
}

// DeleteClusterMetadata mocks base method.
func (m *MockTx) DeleteClusterMetadata(ctx context.Context, filter *ClusterMetadataFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterMetadata", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterMetadata indicates an expected call of DeleteClusterMetadata.
func (mr *MockTxMockRecorder) DeleteClusterMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterMetadata", reflect.TypeOf((*MockTx)(nil).DeleteClusterMetadata), ctx, filter)
}

// DeleteFromActivityInfoMaps mocks base method.
func (m *MockTx) DeleteFromActivityInfoMaps(ctx context.Context, filter ActivityInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromActivityInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromActivityInfoMaps indicates an expected call of DeleteFromActivityInfoMaps.
func (mr *MockTxMockRecorder) DeleteFromActivityInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromActivityInfoMaps", reflect.TypeOf((*MockTx)(nil).DeleteFromActivityInfoMaps), ctx, filter)
}

// DeleteFromBufferedEvents mocks base method.
func (m *MockTx) DeleteFromBufferedEvents(ctx context.Context, filter BufferedEventsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromBufferedEvents", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromBufferedEvents indicates an expected call of DeleteFromBufferedEvents.
func (mr *MockTxMockRecorder) DeleteFromBufferedEvents(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromBufferedEvents", reflect.TypeOf((*MockTx)(nil).DeleteFromBufferedEvents), ctx, filter)
}

// DeleteFromChildExecutionInfoMaps mocks base method.
func (m *MockTx) DeleteFromChildExecutionInfoMaps(ctx context.Context, filter ChildExecutionInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromChildExecutionInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromChildExecutionInfoMaps indicates an expected call of DeleteFromChildExecutionInfoMaps.
func (mr *MockTxMockRecorder) DeleteFromChildExecutionInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromChildExecutionInfoMaps", reflect.TypeOf((*MockTx)(nil).DeleteFromChildExecutionInfoMaps), ctx, filter)
}

// DeleteFromCurrentExecutions mocks base method.
func (m *MockTx) DeleteFromCurrentExecutions(ctx context.Context, filter CurrentExecutionsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromCurrentExecutions", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromCurrentExecutions indicates an expected call of DeleteFromCurrentExecutions.
func (mr *MockTxMockRecorder) DeleteFromCurrentExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromCurrentExecutions", reflect.TypeOf((*MockTx)(nil).DeleteFromCurrentExecutions), ctx, filter)
}

// DeleteFromExecutions mocks base method.
func (m *MockTx) DeleteFromExecutions(ctx context.Context, filter ExecutionsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromExecutions", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromExecutions indicates an expected call of DeleteFromExecutions.
func (mr *MockTxMockRecorder) DeleteFromExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromExecutions", reflect.TypeOf((*MockTx)(nil).DeleteFromExecutions), ctx, filter)
}

// DeleteFromHistoryImmediateTasks mocks base method.
func (m *MockTx) DeleteFromHistoryImmediateTasks(ctx context.Context, filter HistoryImmediateTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromHistoryImmediateTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromHistoryImmediateTasks indicates an expected call of DeleteFromHistoryImmediateTasks.
func (mr *MockTxMockRecorder) DeleteFromHistoryImmediateTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromHistoryImmediateTasks", reflect.TypeOf((*MockTx)(nil).DeleteFromHistoryImmediateTasks), ctx, filter)
}

// DeleteFromHistoryNode mocks base method.
func (m *MockTx) DeleteFromHistoryNode(ctx context.Context, row *HistoryNodeRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromHistoryNode", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromHistoryNode indicates an expected call of DeleteFromHistoryNode.
func (mr *MockTxMockRecorder) DeleteFromHistoryNode(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromHistoryNode", reflect.TypeOf((*MockTx)(nil).DeleteFromHistoryNode), ctx, row)
}

// DeleteFromHistoryScheduledTasks mocks base method.
func (m *MockTx) DeleteFromHistoryScheduledTasks(ctx context.Context, filter HistoryScheduledTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromHistoryScheduledTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromHistoryScheduledTasks indicates an expected call of DeleteFromHistoryScheduledTasks.
func (mr *MockTxMockRecorder) DeleteFromHistoryScheduledTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromHistoryScheduledTasks", reflect.TypeOf((*MockTx)(nil).DeleteFromHistoryScheduledTasks), ctx, filter)
}

// DeleteFromHistoryTree mocks base method.
func (m *MockTx) DeleteFromHistoryTree(ctx context.Context, filter HistoryTreeDeleteFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromHistoryTree", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromHistoryTree indicates an expected call of DeleteFromHistoryTree.
func (mr *MockTxMockRecorder) DeleteFromHistoryTree(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromHistoryTree", reflect.TypeOf((*MockTx)(nil).DeleteFromHistoryTree), ctx, filter)
}

// DeleteFromMessages mocks base method.
func (m *MockTx) DeleteFromMessages(ctx context.Context, filter QueueMessagesFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromMessages", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromMessages indicates an expected call of DeleteFromMessages.
func (mr *MockTxMockRecorder) DeleteFromMessages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromMessages", reflect.TypeOf((*MockTx)(nil).DeleteFromMessages), ctx, filter)
}

// DeleteFromNamespace mocks base method.
func (m *MockTx) DeleteFromNamespace(ctx context.Context, filter NamespaceFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromNamespace", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromNamespace indicates an expected call of DeleteFromNamespace.
func (mr *MockTxMockRecorder) DeleteFromNamespace(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromNamespace", reflect.TypeOf((*MockTx)(nil).DeleteFromNamespace), ctx, filter)
}

// DeleteFromNexusEndpoints mocks base method.
func (m *MockTx) DeleteFromNexusEndpoints(ctx context.Context, id []byte) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromNexusEndpoints", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromNexusEndpoints indicates an expected call of DeleteFromNexusEndpoints.
func (mr *MockTxMockRecorder) DeleteFromNexusEndpoints(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromNexusEndpoints", reflect.TypeOf((*MockTx)(nil).DeleteFromNexusEndpoints), ctx, id)
}

// DeleteFromReplicationDLQTasks mocks base method.
func (m *MockTx) DeleteFromReplicationDLQTasks(ctx context.Context, filter ReplicationDLQTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromReplicationDLQTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromReplicationDLQTasks indicates an expected call of DeleteFromReplicationDLQTasks.
func (mr *MockTxMockRecorder) DeleteFromReplicationDLQTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromReplicationDLQTasks", reflect.TypeOf((*MockTx)(nil).DeleteFromReplicationDLQTasks), ctx, filter)
}

// DeleteFromReplicationTasks mocks base method.
func (m *MockTx) DeleteFromReplicationTasks(ctx context.Context, filter ReplicationTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromReplicationTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromReplicationTasks indicates an expected call of DeleteFromReplicationTasks.
func (mr *MockTxMockRecorder) DeleteFromReplicationTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromReplicationTasks", reflect.TypeOf((*MockTx)(nil).DeleteFromReplicationTasks), ctx, filter)
}

// DeleteFromRequestCancelInfoMaps mocks base method.
func (m *MockTx) DeleteFromRequestCancelInfoMaps(ctx context.Context, filter RequestCancelInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromRequestCancelInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromRequestCancelInfoMaps indicates an expected call of DeleteFromRequestCancelInfoMaps.
func (mr *MockTxMockRecorder) DeleteFromRequestCancelInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromRequestCancelInfoMaps", reflect.TypeOf((*MockTx)(nil).DeleteFromRequestCancelInfoMaps), ctx, filter)
}

// DeleteFromSignalInfoMaps mocks base method.
func (m *MockTx) DeleteFromSignalInfoMaps(ctx context.Context, filter SignalInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromSignalInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromSignalInfoMaps indicates an expected call of DeleteFromSignalInfoMaps.
func (mr *MockTxMockRecorder) DeleteFromSignalInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromSignalInfoMaps", reflect.TypeOf((*MockTx)(nil).DeleteFromSignalInfoMaps), ctx, filter)
}

// DeleteFromSignalsRequestedSets mocks base method.
func (m *MockTx) DeleteFromSignalsRequestedSets(ctx context.Context, filter SignalsRequestedSetsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromSignalsRequestedSets", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromSignalsRequestedSets indicates an expected call of DeleteFromSignalsRequestedSets.
func (mr *MockTxMockRecorder) DeleteFromSignalsRequestedSets(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromSignalsRequestedSets", reflect.TypeOf((*MockTx)(nil).DeleteFromSignalsRequestedSets), ctx, filter)
}

// DeleteFromTaskQueues mocks base method.
func (m *MockTx) DeleteFromTaskQueues(ctx context.Context, filter TaskQueuesFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTaskQueues", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTaskQueues indicates an expected call of DeleteFromTaskQueues.
func (mr *MockTxMockRecorder) DeleteFromTaskQueues(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTaskQueues", reflect.TypeOf((*MockTx)(nil).DeleteFromTaskQueues), ctx, filter)
}

// DeleteFromTasks mocks base method.
func (m *MockTx) DeleteFromTasks(ctx context.Context, filter TasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTasks indicates an expected call of DeleteFromTasks.
func (mr *MockTxMockRecorder) DeleteFromTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTasks", reflect.TypeOf((*MockTx)(nil).DeleteFromTasks), ctx, filter)
}

// DeleteFromTimerInfoMaps mocks base method.
func (m *MockTx) DeleteFromTimerInfoMaps(ctx context.Context, filter TimerInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTimerInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTimerInfoMaps indicates an expected call of DeleteFromTimerInfoMaps.
func (mr *MockTxMockRecorder) DeleteFromTimerInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTimerInfoMaps", reflect.TypeOf((*MockTx)(nil).DeleteFromTimerInfoMaps), ctx, filter)
}

// DeleteFromTimerTasks mocks base method.
func (m *MockTx) DeleteFromTimerTasks(ctx context.Context, filter TimerTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTimerTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTimerTasks indicates an expected call of DeleteFromTimerTasks.
func (mr *MockTxMockRecorder) DeleteFromTimerTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTimerTasks", reflect.TypeOf((*MockTx)(nil).DeleteFromTimerTasks), ctx, filter)
}

// DeleteFromTransferTasks mocks base method.
func (m *MockTx) DeleteFromTransferTasks(ctx context.Context, filter TransferTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTransferTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTransferTasks indicates an expected call of DeleteFromTransferTasks.
func (mr *MockTxMockRecorder) DeleteFromTransferTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTransferTasks", reflect.TypeOf((*MockTx)(nil).DeleteFromTransferTasks), ctx, filter)
}

// DeleteFromVisibility mocks base method.
func (m *MockTx) DeleteFromVisibility(ctx context.Context, filter VisibilityDeleteFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromVisibility", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromVisibility indicates an expected call of DeleteFromVisibility.
func (mr *MockTxMockRecorder) DeleteFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromVisibility", reflect.TypeOf((*MockTx)(nil).DeleteFromVisibility), ctx, filter)
}

// DeleteFromVisibilityTasks mocks base method.
func (m *MockTx) DeleteFromVisibilityTasks(ctx context.Context, filter VisibilityTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromVisibilityTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromVisibilityTasks indicates an expected call of DeleteFromVisibilityTasks.
func (mr *MockTxMockRecorder) DeleteFromVisibilityTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromVisibilityTasks", reflect.TypeOf((*MockTx)(nil).DeleteFromVisibilityTasks), ctx, filter)
}

// GetClusterMembers mocks base method.
func (m *MockTx) GetClusterMembers(ctx context.Context, filter *ClusterMembershipFilter) ([]ClusterMembershipRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMembers", ctx, filter)
	ret0, _ := ret[0].([]ClusterMembershipRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMembers indicates an expected call of GetClusterMembers.
func (mr *MockTxMockRecorder) GetClusterMembers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMembers", reflect.TypeOf((*MockTx)(nil).GetClusterMembers), ctx, filter)
}

// GetClusterMetadata mocks base method.
func (m *MockTx) GetClusterMetadata(ctx context.Context, filter *ClusterMetadataFilter) (*ClusterMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMetadata", ctx, filter)
	ret0, _ := ret[0].(*ClusterMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMetadata indicates an expected call of GetClusterMetadata.
func (mr *MockTxMockRecorder) GetClusterMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMetadata", reflect.TypeOf((*MockTx)(nil).GetClusterMetadata), ctx, filter)
}

// GetFromVisibility mocks base method.
func (m *MockTx) GetFromVisibility(ctx context.Context, filter VisibilityGetFilter) (*VisibilityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromVisibility", ctx, filter)
	ret0, _ := ret[0].(*VisibilityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromVisibility indicates an expected call of GetFromVisibility.
func (mr *MockTxMockRecorder) GetFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromVisibility", reflect.TypeOf((*MockTx)(nil).GetFromVisibility), ctx, filter)
}

// GetLastEnqueuedMessageIDForUpdate mocks base method.
func (m *MockTx) GetLastEnqueuedMessageIDForUpdate(ctx context.Context, queueType persistence.QueueType) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastEnqueuedMessageIDForUpdate", ctx, queueType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastEnqueuedMessageIDForUpdate indicates an expected call of GetLastEnqueuedMessageIDForUpdate.
func (mr *MockTxMockRecorder) GetLastEnqueuedMessageIDForUpdate(ctx, queueType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEnqueuedMessageIDForUpdate", reflect.TypeOf((*MockTx)(nil).GetLastEnqueuedMessageIDForUpdate), ctx, queueType)
}

// GetLastEnqueuedMessageIDForUpdateV2 mocks base method.
func (m *MockTx) GetLastEnqueuedMessageIDForUpdateV2(ctx context.Context, filter QueueV2Filter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastEnqueuedMessageIDForUpdateV2", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastEnqueuedMessageIDForUpdateV2 indicates an expected call of GetLastEnqueuedMessageIDForUpdateV2.
func (mr *MockTxMockRecorder) GetLastEnqueuedMessageIDForUpdateV2(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEnqueuedMessageIDForUpdateV2", reflect.TypeOf((*MockTx)(nil).GetLastEnqueuedMessageIDForUpdateV2), ctx, filter)
}

// GetNexusEndpointByID mocks base method.
func (m *MockTx) GetNexusEndpointByID(ctx context.Context, serviceID []byte) (*NexusEndpointsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNexusEndpointByID", ctx, serviceID)
	ret0, _ := ret[0].(*NexusEndpointsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusEndpointByID indicates an expected call of GetNexusEndpointByID.
func (mr *MockTxMockRecorder) GetNexusEndpointByID(ctx, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusEndpointByID", reflect.TypeOf((*MockTx)(nil).GetNexusEndpointByID), ctx, serviceID)
}

// GetNexusEndpointsTableVersion mocks base method.
func (m *MockTx) GetNexusEndpointsTableVersion(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNexusEndpointsTableVersion", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusEndpointsTableVersion indicates an expected call of GetNexusEndpointsTableVersion.
func (mr *MockTxMockRecorder) GetNexusEndpointsTableVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusEndpointsTableVersion", reflect.TypeOf((*MockTx)(nil).GetNexusEndpointsTableVersion), ctx)
}

// GetTaskQueueUserData mocks base method.
func (m *MockTx) GetTaskQueueUserData(ctx context.Context, request *GetTaskQueueUserDataRequest) (*VersionedBlob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskQueueUserData", ctx, request)
	ret0, _ := ret[0].(*VersionedBlob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskQueueUserData indicates an expected call of GetTaskQueueUserData.
func (mr *MockTxMockRecorder) GetTaskQueueUserData(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskQueueUserData", reflect.TypeOf((*MockTx)(nil).GetTaskQueueUserData), ctx, request)
}

// GetTaskQueuesByBuildId mocks base method.
func (m *MockTx) GetTaskQueuesByBuildId(ctx context.Context, request *GetTaskQueuesByBuildIdRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskQueuesByBuildId", ctx, request)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskQueuesByBuildId indicates an expected call of GetTaskQueuesByBuildId.
func (mr *MockTxMockRecorder) GetTaskQueuesByBuildId(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskQueuesByBuildId", reflect.TypeOf((*MockTx)(nil).GetTaskQueuesByBuildId), ctx, request)
}

// IncrementNexusEndpointsTableVersion mocks base method.
func (m *MockTx) IncrementNexusEndpointsTableVersion(ctx context.Context, lastKnownTableVersion int64) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementNexusEndpointsTableVersion", ctx, lastKnownTableVersion)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementNexusEndpointsTableVersion indicates an expected call of IncrementNexusEndpointsTableVersion.
func (mr *MockTxMockRecorder) IncrementNexusEndpointsTableVersion(ctx, lastKnownTableVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementNexusEndpointsTableVersion", reflect.TypeOf((*MockTx)(nil).IncrementNexusEndpointsTableVersion), ctx, lastKnownTableVersion)
}

// InitializeNexusEndpointsTableVersion mocks base method.
func (m *MockTx) InitializeNexusEndpointsTableVersion(ctx context.Context) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeNexusEndpointsTableVersion", ctx)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeNexusEndpointsTableVersion indicates an expected call of InitializeNexusEndpointsTableVersion.
func (mr *MockTxMockRecorder) InitializeNexusEndpointsTableVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeNexusEndpointsTableVersion", reflect.TypeOf((*MockTx)(nil).InitializeNexusEndpointsTableVersion), ctx)
}

// InsertIntoBufferedEvents mocks base method.
func (m *MockTx) InsertIntoBufferedEvents(ctx context.Context, rows []BufferedEventsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoBufferedEvents", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoBufferedEvents indicates an expected call of InsertIntoBufferedEvents.
func (mr *MockTxMockRecorder) InsertIntoBufferedEvents(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoBufferedEvents", reflect.TypeOf((*MockTx)(nil).InsertIntoBufferedEvents), ctx, rows)
}

// InsertIntoCurrentExecutions mocks base method.
func (m *MockTx) InsertIntoCurrentExecutions(ctx context.Context, row *CurrentExecutionsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoCurrentExecutions", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoCurrentExecutions indicates an expected call of InsertIntoCurrentExecutions.
func (mr *MockTxMockRecorder) InsertIntoCurrentExecutions(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoCurrentExecutions", reflect.TypeOf((*MockTx)(nil).InsertIntoCurrentExecutions), ctx, row)
}

// InsertIntoExecutions mocks base method.
func (m *MockTx) InsertIntoExecutions(ctx context.Context, row *ExecutionsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoExecutions", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoExecutions indicates an expected call of InsertIntoExecutions.
func (mr *MockTxMockRecorder) InsertIntoExecutions(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoExecutions", reflect.TypeOf((*MockTx)(nil).InsertIntoExecutions), ctx, row)
}

// InsertIntoHistoryImmediateTasks mocks base method.
func (m *MockTx) InsertIntoHistoryImmediateTasks(ctx context.Context, rows []HistoryImmediateTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoHistoryImmediateTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoHistoryImmediateTasks indicates an expected call of InsertIntoHistoryImmediateTasks.
func (mr *MockTxMockRecorder) InsertIntoHistoryImmediateTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoHistoryImmediateTasks", reflect.TypeOf((*MockTx)(nil).InsertIntoHistoryImmediateTasks), ctx, rows)
}

// InsertIntoHistoryNode mocks base method.
func (m *MockTx) InsertIntoHistoryNode(ctx context.Context, row *HistoryNodeRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoHistoryNode", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoHistoryNode indicates an expected call of InsertIntoHistoryNode.
func (mr *MockTxMockRecorder) InsertIntoHistoryNode(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoHistoryNode", reflect.TypeOf((*MockTx)(nil).InsertIntoHistoryNode), ctx, row)
}

// InsertIntoHistoryScheduledTasks mocks base method.
func (m *MockTx) InsertIntoHistoryScheduledTasks(ctx context.Context, rows []HistoryScheduledTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoHistoryScheduledTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoHistoryScheduledTasks indicates an expected call of InsertIntoHistoryScheduledTasks.
func (mr *MockTxMockRecorder) InsertIntoHistoryScheduledTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoHistoryScheduledTasks", reflect.TypeOf((*MockTx)(nil).InsertIntoHistoryScheduledTasks), ctx, rows)
}

// InsertIntoHistoryTree mocks base method.
func (m *MockTx) InsertIntoHistoryTree(ctx context.Context, row *HistoryTreeRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoHistoryTree", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoHistoryTree indicates an expected call of InsertIntoHistoryTree.
func (mr *MockTxMockRecorder) InsertIntoHistoryTree(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoHistoryTree", reflect.TypeOf((*MockTx)(nil).InsertIntoHistoryTree), ctx, row)
}

// InsertIntoMessages mocks base method.
func (m *MockTx) InsertIntoMessages(ctx context.Context, row []QueueMessageRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoMessages", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoMessages indicates an expected call of InsertIntoMessages.
func (mr *MockTxMockRecorder) InsertIntoMessages(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoMessages", reflect.TypeOf((*MockTx)(nil).InsertIntoMessages), ctx, row)
}

// InsertIntoNamespace mocks base method.
func (m *MockTx) InsertIntoNamespace(ctx context.Context, rows *NamespaceRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoNamespace", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoNamespace indicates an expected call of InsertIntoNamespace.
func (mr *MockTxMockRecorder) InsertIntoNamespace(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoNamespace", reflect.TypeOf((*MockTx)(nil).InsertIntoNamespace), ctx, rows)
}

// InsertIntoNexusEndpoints mocks base method.
func (m *MockTx) InsertIntoNexusEndpoints(ctx context.Context, row *NexusEndpointsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoNexusEndpoints", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoNexusEndpoints indicates an expected call of InsertIntoNexusEndpoints.
func (mr *MockTxMockRecorder) InsertIntoNexusEndpoints(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoNexusEndpoints", reflect.TypeOf((*MockTx)(nil).InsertIntoNexusEndpoints), ctx, row)
}

// InsertIntoQueueMetadata mocks base method.
func (m *MockTx) InsertIntoQueueMetadata(ctx context.Context, row *QueueMetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoQueueMetadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoQueueMetadata indicates an expected call of InsertIntoQueueMetadata.
func (mr *MockTxMockRecorder) InsertIntoQueueMetadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoQueueMetadata", reflect.TypeOf((*MockTx)(nil).InsertIntoQueueMetadata), ctx, row)
}

// InsertIntoQueueV2Messages mocks base method.
func (m *MockTx) InsertIntoQueueV2Messages(ctx context.Context, row []QueueV2MessageRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoQueueV2Messages", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoQueueV2Messages indicates an expected call of InsertIntoQueueV2Messages.
func (mr *MockTxMockRecorder) InsertIntoQueueV2Messages(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoQueueV2Messages", reflect.TypeOf((*MockTx)(nil).InsertIntoQueueV2Messages), ctx, row)
}

// InsertIntoQueueV2Metadata mocks base method.
func (m *MockTx) InsertIntoQueueV2Metadata(ctx context.Context, row *QueueV2MetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoQueueV2Metadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoQueueV2Metadata indicates an expected call of InsertIntoQueueV2Metadata.
func (mr *MockTxMockRecorder) InsertIntoQueueV2Metadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoQueueV2Metadata", reflect.TypeOf((*MockTx)(nil).InsertIntoQueueV2Metadata), ctx, row)
}

// InsertIntoReplicationDLQTasks mocks base method.
func (m *MockTx) InsertIntoReplicationDLQTasks(ctx context.Context, row []ReplicationDLQTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoReplicationDLQTasks", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoReplicationDLQTasks indicates an expected call of InsertIntoReplicationDLQTasks.
func (mr *MockTxMockRecorder) InsertIntoReplicationDLQTasks(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoReplicationDLQTasks", reflect.TypeOf((*MockTx)(nil).InsertIntoReplicationDLQTasks), ctx, row)
}

// InsertIntoReplicationTasks mocks base method.
func (m *MockTx) InsertIntoReplicationTasks(ctx context.Context, rows []ReplicationTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoReplicationTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoReplicationTasks indicates an expected call of InsertIntoReplicationTasks.
func (mr *MockTxMockRecorder) InsertIntoReplicationTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoReplicationTasks", reflect.TypeOf((*MockTx)(nil).InsertIntoReplicationTasks), ctx, rows)
}

// InsertIntoShards mocks base method.
func (m *MockTx) InsertIntoShards(ctx context.Context, rows *ShardsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoShards", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoShards indicates an expected call of InsertIntoShards.
func (mr *MockTxMockRecorder) InsertIntoShards(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoShards", reflect.TypeOf((*MockTx)(nil).InsertIntoShards), ctx, rows)
}

// InsertIntoTaskQueues mocks base method.
func (m *MockTx) InsertIntoTaskQueues(ctx context.Context, row *TaskQueuesRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoTaskQueues", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoTaskQueues indicates an expected call of InsertIntoTaskQueues.
func (mr *MockTxMockRecorder) InsertIntoTaskQueues(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoTaskQueues", reflect.TypeOf((*MockTx)(nil).InsertIntoTaskQueues), ctx, row)
}

// InsertIntoTasks mocks base method.
func (m *MockTx) InsertIntoTasks(ctx context.Context, rows []TasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoTasks indicates an expected call of InsertIntoTasks.
func (mr *MockTxMockRecorder) InsertIntoTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoTasks", reflect.TypeOf((*MockTx)(nil).InsertIntoTasks), ctx, rows)
}

// InsertIntoTimerTasks mocks base method.
func (m *MockTx) InsertIntoTimerTasks(ctx context.Context, rows []TimerTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoTimerTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoTimerTasks indicates an expected call of InsertIntoTimerTasks.
func (mr *MockTxMockRecorder) InsertIntoTimerTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoTimerTasks", reflect.TypeOf((*MockTx)(nil).InsertIntoTimerTasks), ctx, rows)
}

// InsertIntoTransferTasks mocks base method.
func (m *MockTx) InsertIntoTransferTasks(ctx context.Context, rows []TransferTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoTransferTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoTransferTasks indicates an expected call of InsertIntoTransferTasks.
func (mr *MockTxMockRecorder) InsertIntoTransferTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoTransferTasks", reflect.TypeOf((*MockTx)(nil).InsertIntoTransferTasks), ctx, rows)
}

// InsertIntoVisibility mocks base method.
func (m *MockTx) InsertIntoVisibility(ctx context.Context, row *VisibilityRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoVisibility", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoVisibility indicates an expected call of InsertIntoVisibility.
func (mr *MockTxMockRecorder) InsertIntoVisibility(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoVisibility", reflect.TypeOf((*MockTx)(nil).InsertIntoVisibility), ctx, row)
}

// InsertIntoVisibilityTasks mocks base method.
func (m *MockTx) InsertIntoVisibilityTasks(ctx context.Context, rows []VisibilityTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoVisibilityTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoVisibilityTasks indicates an expected call of InsertIntoVisibilityTasks.
func (mr *MockTxMockRecorder) InsertIntoVisibilityTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoVisibilityTasks", reflect.TypeOf((*MockTx)(nil).InsertIntoVisibilityTasks), ctx, rows)
}

// ListClusterMetadata mocks base method.
func (m *MockTx) ListClusterMetadata(ctx context.Context, filter *ClusterMetadataFilter) ([]ClusterMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterMetadata", ctx, filter)
	ret0, _ := ret[0].([]ClusterMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterMetadata indicates an expected call of ListClusterMetadata.
func (mr *MockTxMockRecorder) ListClusterMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterMetadata", reflect.TypeOf((*MockTx)(nil).ListClusterMetadata), ctx, filter)
}

// ListNexusEndpoints mocks base method.
func (m *MockTx) ListNexusEndpoints(ctx context.Context, request *ListNexusEndpointsRequest) ([]NexusEndpointsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNexusEndpoints", ctx, request)
	ret0, _ := ret[0].([]NexusEndpointsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNexusEndpoints indicates an expected call of ListNexusEndpoints.
func (mr *MockTxMockRecorder) ListNexusEndpoints(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNexusEndpoints", reflect.TypeOf((*MockTx)(nil).ListNexusEndpoints), ctx, request)
}

// ListTaskQueueUserDataEntries mocks base method.
func (m *MockTx) ListTaskQueueUserDataEntries(ctx context.Context, request *ListTaskQueueUserDataEntriesRequest) ([]TaskQueueUserDataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaskQueueUserDataEntries", ctx, request)
	ret0, _ := ret[0].([]TaskQueueUserDataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaskQueueUserDataEntries indicates an expected call of ListTaskQueueUserDataEntries.
func (mr *MockTxMockRecorder) ListTaskQueueUserDataEntries(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaskQueueUserDataEntries", reflect.TypeOf((*MockTx)(nil).ListTaskQueueUserDataEntries), ctx, request)
}

// LockCurrentExecutions mocks base method.
func (m *MockTx) LockCurrentExecutions(ctx context.Context, filter CurrentExecutionsFilter) (*CurrentExecutionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockCurrentExecutions", ctx, filter)
	ret0, _ := ret[0].(*CurrentExecutionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockCurrentExecutions indicates an expected call of LockCurrentExecutions.
func (mr *MockTxMockRecorder) LockCurrentExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockCurrentExecutions", reflect.TypeOf((*MockTx)(nil).LockCurrentExecutions), ctx, filter)
}

// LockCurrentExecutionsJoinExecutions mocks base method.
func (m *MockTx) LockCurrentExecutionsJoinExecutions(ctx context.Context, filter CurrentExecutionsFilter) ([]CurrentExecutionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockCurrentExecutionsJoinExecutions", ctx, filter)
	ret0, _ := ret[0].([]CurrentExecutionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockCurrentExecutionsJoinExecutions indicates an expected call of LockCurrentExecutionsJoinExecutions.
func (mr *MockTxMockRecorder) LockCurrentExecutionsJoinExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockCurrentExecutionsJoinExecutions", reflect.TypeOf((*MockTx)(nil).LockCurrentExecutionsJoinExecutions), ctx, filter)
}

// LockNamespaceMetadata mocks base method.
func (m *MockTx) LockNamespaceMetadata(ctx context.Context) (*NamespaceMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockNamespaceMetadata", ctx)
	ret0, _ := ret[0].(*NamespaceMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockNamespaceMetadata indicates an expected call of LockNamespaceMetadata.
func (mr *MockTxMockRecorder) LockNamespaceMetadata(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockNamespaceMetadata", reflect.TypeOf((*MockTx)(nil).LockNamespaceMetadata), ctx)
}

// LockQueueMetadata mocks base method.
func (m *MockTx) LockQueueMetadata(ctx context.Context, filter QueueMetadataFilter) (*QueueMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockQueueMetadata", ctx, filter)
	ret0, _ := ret[0].(*QueueMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockQueueMetadata indicates an expected call of LockQueueMetadata.
func (mr *MockTxMockRecorder) LockQueueMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockQueueMetadata", reflect.TypeOf((*MockTx)(nil).LockQueueMetadata), ctx, filter)
}

// LockTaskQueues mocks base method.
func (m *MockTx) LockTaskQueues(ctx context.Context, filter TaskQueuesFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockTaskQueues", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockTaskQueues indicates an expected call of LockTaskQueues.
func (mr *MockTxMockRecorder) LockTaskQueues(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockTaskQueues", reflect.TypeOf((*MockTx)(nil).LockTaskQueues), ctx, filter)
}

// PaginateBranchesFromHistoryTree mocks base method.
func (m *MockTx) PaginateBranchesFromHistoryTree(ctx context.Context, filter HistoryTreeBranchPage) ([]HistoryTreeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginateBranchesFromHistoryTree", ctx, filter)
	ret0, _ := ret[0].([]HistoryTreeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaginateBranchesFromHistoryTree indicates an expected call of PaginateBranchesFromHistoryTree.
func (mr *MockTxMockRecorder) PaginateBranchesFromHistoryTree(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginateBranchesFromHistoryTree", reflect.TypeOf((*MockTx)(nil).PaginateBranchesFromHistoryTree), ctx, filter)
}

// PruneClusterMembership mocks base method.
func (m *MockTx) PruneClusterMembership(ctx context.Context, filter *PruneClusterMembershipFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneClusterMembership", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PruneClusterMembership indicates an expected call of PruneClusterMembership.
func (mr *MockTxMockRecorder) PruneClusterMembership(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneClusterMembership", reflect.TypeOf((*MockTx)(nil).PruneClusterMembership), ctx, filter)
}

// RangeDeleteFromHistoryImmediateTasks mocks base method.
func (m *MockTx) RangeDeleteFromHistoryImmediateTasks(ctx context.Context, filter HistoryImmediateTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromHistoryImmediateTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromHistoryImmediateTasks indicates an expected call of RangeDeleteFromHistoryImmediateTasks.
func (mr *MockTxMockRecorder) RangeDeleteFromHistoryImmediateTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromHistoryImmediateTasks", reflect.TypeOf((*MockTx)(nil).RangeDeleteFromHistoryImmediateTasks), ctx, filter)
}

// RangeDeleteFromHistoryNode mocks base method.
func (m *MockTx) RangeDeleteFromHistoryNode(ctx context.Context, filter HistoryNodeDeleteFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromHistoryNode", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromHistoryNode indicates an expected call of RangeDeleteFromHistoryNode.
func (mr *MockTxMockRecorder) RangeDeleteFromHistoryNode(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromHistoryNode", reflect.TypeOf((*MockTx)(nil).RangeDeleteFromHistoryNode), ctx, filter)
}

// RangeDeleteFromHistoryScheduledTasks mocks base method.
func (m *MockTx) RangeDeleteFromHistoryScheduledTasks(ctx context.Context, filter HistoryScheduledTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromHistoryScheduledTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromHistoryScheduledTasks indicates an expected call of RangeDeleteFromHistoryScheduledTasks.
func (mr *MockTxMockRecorder) RangeDeleteFromHistoryScheduledTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromHistoryScheduledTasks", reflect.TypeOf((*MockTx)(nil).RangeDeleteFromHistoryScheduledTasks), ctx, filter)
}

// RangeDeleteFromMessages mocks base method.
func (m *MockTx) RangeDeleteFromMessages(ctx context.Context, filter QueueMessagesRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromMessages", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromMessages indicates an expected call of RangeDeleteFromMessages.
func (mr *MockTxMockRecorder) RangeDeleteFromMessages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromMessages", reflect.TypeOf((*MockTx)(nil).RangeDeleteFromMessages), ctx, filter)
}

// RangeDeleteFromQueueV2Messages mocks base method.
func (m *MockTx) RangeDeleteFromQueueV2Messages(ctx context.Context, filter QueueV2MessagesFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromQueueV2Messages", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromQueueV2Messages indicates an expected call of RangeDeleteFromQueueV2Messages.
func (mr *MockTxMockRecorder) RangeDeleteFromQueueV2Messages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromQueueV2Messages", reflect.TypeOf((*MockTx)(nil).RangeDeleteFromQueueV2Messages), ctx, filter)
}

// RangeDeleteFromReplicationDLQTasks mocks base method.
func (m *MockTx) RangeDeleteFromReplicationDLQTasks(ctx context.Context, filter ReplicationDLQTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromReplicationDLQTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromReplicationDLQTasks indicates an expected call of RangeDeleteFromReplicationDLQTasks.
func (mr *MockTxMockRecorder) RangeDeleteFromReplicationDLQTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromReplicationDLQTasks", reflect.TypeOf((*MockTx)(nil).RangeDeleteFromReplicationDLQTasks), ctx, filter)
}

// RangeDeleteFromReplicationTasks mocks base method.
func (m *MockTx) RangeDeleteFromReplicationTasks(ctx context.Context, filter ReplicationTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromReplicationTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromReplicationTasks indicates an expected call of RangeDeleteFromReplicationTasks.
func (mr *MockTxMockRecorder) RangeDeleteFromReplicationTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromReplicationTasks", reflect.TypeOf((*MockTx)(nil).RangeDeleteFromReplicationTasks), ctx, filter)
}

// RangeDeleteFromTimerTasks mocks base method.
func (m *MockTx) RangeDeleteFromTimerTasks(ctx context.Context, filter TimerTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromTimerTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromTimerTasks indicates an expected call of RangeDeleteFromTimerTasks.
func (mr *MockTxMockRecorder) RangeDeleteFromTimerTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromTimerTasks", reflect.TypeOf((*MockTx)(nil).RangeDeleteFromTimerTasks), ctx, filter)
}

// RangeDeleteFromTransferTasks mocks base method.
func (m *MockTx) RangeDeleteFromTransferTasks(ctx context.Context, filter TransferTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromTransferTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromTransferTasks indicates an expected call of RangeDeleteFromTransferTasks.
func (mr *MockTxMockRecorder) RangeDeleteFromTransferTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromTransferTasks", reflect.TypeOf((*MockTx)(nil).RangeDeleteFromTransferTasks), ctx, filter)
}

// RangeDeleteFromVisibilityTasks mocks base method.
func (m *MockTx) RangeDeleteFromVisibilityTasks(ctx context.Context, filter VisibilityTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromVisibilityTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromVisibilityTasks indicates an expected call of RangeDeleteFromVisibilityTasks.
func (mr *MockTxMockRecorder) RangeDeleteFromVisibilityTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromVisibilityTasks", reflect.TypeOf((*MockTx)(nil).RangeDeleteFromVisibilityTasks), ctx, filter)
}

// RangeSelectFromHistoryImmediateTasks mocks base method.
func (m *MockTx) RangeSelectFromHistoryImmediateTasks(ctx context.Context, filter HistoryImmediateTasksRangeFilter) ([]HistoryImmediateTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromHistoryImmediateTasks", ctx, filter)
	ret0, _ := ret[0].([]HistoryImmediateTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromHistoryImmediateTasks indicates an expected call of RangeSelectFromHistoryImmediateTasks.
func (mr *MockTxMockRecorder) RangeSelectFromHistoryImmediateTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromHistoryImmediateTasks", reflect.TypeOf((*MockTx)(nil).RangeSelectFromHistoryImmediateTasks), ctx, filter)
}

// RangeSelectFromHistoryNode mocks base method.
func (m *MockTx) RangeSelectFromHistoryNode(ctx context.Context, filter HistoryNodeSelectFilter) ([]HistoryNodeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromHistoryNode", ctx, filter)
	ret0, _ := ret[0].([]HistoryNodeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromHistoryNode indicates an expected call of RangeSelectFromHistoryNode.
func (mr *MockTxMockRecorder) RangeSelectFromHistoryNode(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromHistoryNode", reflect.TypeOf((*MockTx)(nil).RangeSelectFromHistoryNode), ctx, filter)
}

// RangeSelectFromHistoryScheduledTasks mocks base method.
func (m *MockTx) RangeSelectFromHistoryScheduledTasks(ctx context.Context, filter HistoryScheduledTasksRangeFilter) ([]HistoryScheduledTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromHistoryScheduledTasks", ctx, filter)
	ret0, _ := ret[0].([]HistoryScheduledTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromHistoryScheduledTasks indicates an expected call of RangeSelectFromHistoryScheduledTasks.
func (mr *MockTxMockRecorder) RangeSelectFromHistoryScheduledTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromHistoryScheduledTasks", reflect.TypeOf((*MockTx)(nil).RangeSelectFromHistoryScheduledTasks), ctx, filter)
}

// RangeSelectFromMessages mocks base method.
func (m *MockTx) RangeSelectFromMessages(ctx context.Context, filter QueueMessagesRangeFilter) ([]QueueMessageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromMessages", ctx, filter)
	ret0, _ := ret[0].([]QueueMessageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromMessages indicates an expected call of RangeSelectFromMessages.
func (mr *MockTxMockRecorder) RangeSelectFromMessages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromMessages", reflect.TypeOf((*MockTx)(nil).RangeSelectFromMessages), ctx, filter)
}

// RangeSelectFromQueueV2Messages mocks base method.
func (m *MockTx) RangeSelectFromQueueV2Messages(ctx context.Context, filter QueueV2MessagesFilter) ([]QueueV2MessageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromQueueV2Messages", ctx, filter)
	ret0, _ := ret[0].([]QueueV2MessageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromQueueV2Messages indicates an expected call of RangeSelectFromQueueV2Messages.
func (mr *MockTxMockRecorder) RangeSelectFromQueueV2Messages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromQueueV2Messages", reflect.TypeOf((*MockTx)(nil).RangeSelectFromQueueV2Messages), ctx, filter)
}

// RangeSelectFromReplicationDLQTasks mocks base method.
func (m *MockTx) RangeSelectFromReplicationDLQTasks(ctx context.Context, filter ReplicationDLQTasksRangeFilter) ([]ReplicationDLQTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromReplicationDLQTasks", ctx, filter)
	ret0, _ := ret[0].([]ReplicationDLQTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromReplicationDLQTasks indicates an expected call of RangeSelectFromReplicationDLQTasks.
func (mr *MockTxMockRecorder) RangeSelectFromReplicationDLQTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromReplicationDLQTasks", reflect.TypeOf((*MockTx)(nil).RangeSelectFromReplicationDLQTasks), ctx, filter)
}

// RangeSelectFromReplicationTasks mocks base method.
func (m *MockTx) RangeSelectFromReplicationTasks(ctx context.Context, filter ReplicationTasksRangeFilter) ([]ReplicationTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromReplicationTasks", ctx, filter)
	ret0, _ := ret[0].([]ReplicationTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromReplicationTasks indicates an expected call of RangeSelectFromReplicationTasks.
func (mr *MockTxMockRecorder) RangeSelectFromReplicationTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromReplicationTasks", reflect.TypeOf((*MockTx)(nil).RangeSelectFromReplicationTasks), ctx, filter)
}

// RangeSelectFromTimerTasks mocks base method.
func (m *MockTx) RangeSelectFromTimerTasks(ctx context.Context, filter TimerTasksRangeFilter) ([]TimerTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromTimerTasks", ctx, filter)
	ret0, _ := ret[0].([]TimerTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromTimerTasks indicates an expected call of RangeSelectFromTimerTasks.
func (mr *MockTxMockRecorder) RangeSelectFromTimerTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromTimerTasks", reflect.TypeOf((*MockTx)(nil).RangeSelectFromTimerTasks), ctx, filter)
}

// RangeSelectFromTransferTasks mocks base method.
func (m *MockTx) RangeSelectFromTransferTasks(ctx context.Context, filter TransferTasksRangeFilter) ([]TransferTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromTransferTasks", ctx, filter)
	ret0, _ := ret[0].([]TransferTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromTransferTasks indicates an expected call of RangeSelectFromTransferTasks.
func (mr *MockTxMockRecorder) RangeSelectFromTransferTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromTransferTasks", reflect.TypeOf((*MockTx)(nil).RangeSelectFromTransferTasks), ctx, filter)
}

// RangeSelectFromVisibilityTasks mocks base method.
func (m *MockTx) RangeSelectFromVisibilityTasks(ctx context.Context, filter VisibilityTasksRangeFilter) ([]VisibilityTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromVisibilityTasks", ctx, filter)
	ret0, _ := ret[0].([]VisibilityTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromVisibilityTasks indicates an expected call of RangeSelectFromVisibilityTasks.
func (mr *MockTxMockRecorder) RangeSelectFromVisibilityTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromVisibilityTasks", reflect.TypeOf((*MockTx)(nil).RangeSelectFromVisibilityTasks), ctx, filter)
}

// ReadLockExecutions mocks base method.
func (m *MockTx) ReadLockExecutions(ctx context.Context, filter ExecutionsFilter) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLockExecutions", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadLockExecutions indicates an expected call of ReadLockExecutions.
func (mr *MockTxMockRecorder) ReadLockExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLockExecutions", reflect.TypeOf((*MockTx)(nil).ReadLockExecutions), ctx, filter)
}

// ReadLockShards mocks base method.
func (m *MockTx) ReadLockShards(ctx context.Context, filter ShardsFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLockShards", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLockShards indicates an expected call of ReadLockShards.
func (mr *MockTxMockRecorder) ReadLockShards(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLockShards", reflect.TypeOf((*MockTx)(nil).ReadLockShards), ctx, filter)
}

// RemoveFromBuildIdToTaskQueueMapping mocks base method.
func (m *MockTx) RemoveFromBuildIdToTaskQueueMapping(ctx context.Context, request RemoveFromBuildIdToTaskQueueMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromBuildIdToTaskQueueMapping", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromBuildIdToTaskQueueMapping indicates an expected call of RemoveFromBuildIdToTaskQueueMapping.
func (mr *MockTxMockRecorder) RemoveFromBuildIdToTaskQueueMapping(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromBuildIdToTaskQueueMapping", reflect.TypeOf((*MockTx)(nil).RemoveFromBuildIdToTaskQueueMapping), ctx, request)
}

// ReplaceIntoActivityInfoMaps mocks base method.
func (m *MockTx) ReplaceIntoActivityInfoMaps(ctx context.Context, rows []ActivityInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoActivityInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoActivityInfoMaps indicates an expected call of ReplaceIntoActivityInfoMaps.
func (mr *MockTxMockRecorder) ReplaceIntoActivityInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoActivityInfoMaps", reflect.TypeOf((*MockTx)(nil).ReplaceIntoActivityInfoMaps), ctx, rows)
}

// ReplaceIntoChildExecutionInfoMaps mocks base method.
func (m *MockTx) ReplaceIntoChildExecutionInfoMaps(ctx context.Context, rows []ChildExecutionInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoChildExecutionInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoChildExecutionInfoMaps indicates an expected call of ReplaceIntoChildExecutionInfoMaps.
func (mr *MockTxMockRecorder) ReplaceIntoChildExecutionInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoChildExecutionInfoMaps", reflect.TypeOf((*MockTx)(nil).ReplaceIntoChildExecutionInfoMaps), ctx, rows)
}

// ReplaceIntoRequestCancelInfoMaps mocks base method.
func (m *MockTx) ReplaceIntoRequestCancelInfoMaps(ctx context.Context, rows []RequestCancelInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoRequestCancelInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoRequestCancelInfoMaps indicates an expected call of ReplaceIntoRequestCancelInfoMaps.
func (mr *MockTxMockRecorder) ReplaceIntoRequestCancelInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoRequestCancelInfoMaps", reflect.TypeOf((*MockTx)(nil).ReplaceIntoRequestCancelInfoMaps), ctx, rows)
}

// ReplaceIntoSignalInfoMaps mocks base method.
func (m *MockTx) ReplaceIntoSignalInfoMaps(ctx context.Context, rows []SignalInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoSignalInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoSignalInfoMaps indicates an expected call of ReplaceIntoSignalInfoMaps.
func (mr *MockTxMockRecorder) ReplaceIntoSignalInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoSignalInfoMaps", reflect.TypeOf((*MockTx)(nil).ReplaceIntoSignalInfoMaps), ctx, rows)
}

// ReplaceIntoSignalsRequestedSets mocks base method.
func (m *MockTx) ReplaceIntoSignalsRequestedSets(ctx context.Context, rows []SignalsRequestedSetsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoSignalsRequestedSets", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoSignalsRequestedSets indicates an expected call of ReplaceIntoSignalsRequestedSets.
func (mr *MockTxMockRecorder) ReplaceIntoSignalsRequestedSets(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoSignalsRequestedSets", reflect.TypeOf((*MockTx)(nil).ReplaceIntoSignalsRequestedSets), ctx, rows)
}

// ReplaceIntoTimerInfoMaps mocks base method.
func (m *MockTx) ReplaceIntoTimerInfoMaps(ctx context.Context, rows []TimerInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoTimerInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoTimerInfoMaps indicates an expected call of ReplaceIntoTimerInfoMaps.
func (mr *MockTxMockRecorder) ReplaceIntoTimerInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoTimerInfoMaps", reflect.TypeOf((*MockTx)(nil).ReplaceIntoTimerInfoMaps), ctx, rows)
}

// ReplaceIntoVisibility mocks base method.
func (m *MockTx) ReplaceIntoVisibility(ctx context.Context, row *VisibilityRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoVisibility", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoVisibility indicates an expected call of ReplaceIntoVisibility.
func (mr *MockTxMockRecorder) ReplaceIntoVisibility(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoVisibility", reflect.TypeOf((*MockTx)(nil).ReplaceIntoVisibility), ctx, row)
}

// Rollback mocks base method.
func (m *MockTx) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTxMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTx)(nil).Rollback))
}

// SaveClusterMetadata mocks base method.
func (m *MockTx) SaveClusterMetadata(ctx context.Context, row *ClusterMetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveClusterMetadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveClusterMetadata indicates an expected call of SaveClusterMetadata.
func (mr *MockTxMockRecorder) SaveClusterMetadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveClusterMetadata", reflect.TypeOf((*MockTx)(nil).SaveClusterMetadata), ctx, row)
}

// SelectAllFromActivityInfoMaps mocks base method.
func (m *MockTx) SelectAllFromActivityInfoMaps(ctx context.Context, filter ActivityInfoMapsAllFilter) ([]ActivityInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromActivityInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]ActivityInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromActivityInfoMaps indicates an expected call of SelectAllFromActivityInfoMaps.
func (mr *MockTxMockRecorder) SelectAllFromActivityInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromActivityInfoMaps", reflect.TypeOf((*MockTx)(nil).SelectAllFromActivityInfoMaps), ctx, filter)
}

// SelectAllFromChildExecutionInfoMaps mocks base method.
func (m *MockTx) SelectAllFromChildExecutionInfoMaps(ctx context.Context, filter ChildExecutionInfoMapsAllFilter) ([]ChildExecutionInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromChildExecutionInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]ChildExecutionInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromChildExecutionInfoMaps indicates an expected call of SelectAllFromChildExecutionInfoMaps.
func (mr *MockTxMockRecorder) SelectAllFromChildExecutionInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromChildExecutionInfoMaps", reflect.TypeOf((*MockTx)(nil).SelectAllFromChildExecutionInfoMaps), ctx, filter)
}

// SelectAllFromRequestCancelInfoMaps mocks base method.
func (m *MockTx) SelectAllFromRequestCancelInfoMaps(ctx context.Context, filter RequestCancelInfoMapsAllFilter) ([]RequestCancelInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromRequestCancelInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]RequestCancelInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromRequestCancelInfoMaps indicates an expected call of SelectAllFromRequestCancelInfoMaps.
func (mr *MockTxMockRecorder) SelectAllFromRequestCancelInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromRequestCancelInfoMaps", reflect.TypeOf((*MockTx)(nil).SelectAllFromRequestCancelInfoMaps), ctx, filter)
}

// SelectAllFromSignalInfoMaps mocks base method.
func (m *MockTx) SelectAllFromSignalInfoMaps(ctx context.Context, filter SignalInfoMapsAllFilter) ([]SignalInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromSignalInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]SignalInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromSignalInfoMaps indicates an expected call of SelectAllFromSignalInfoMaps.
func (mr *MockTxMockRecorder) SelectAllFromSignalInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromSignalInfoMaps", reflect.TypeOf((*MockTx)(nil).SelectAllFromSignalInfoMaps), ctx, filter)
}

// SelectAllFromSignalsRequestedSets mocks base method.
func (m *MockTx) SelectAllFromSignalsRequestedSets(ctx context.Context, filter SignalsRequestedSetsAllFilter) ([]SignalsRequestedSetsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromSignalsRequestedSets", ctx, filter)
	ret0, _ := ret[0].([]SignalsRequestedSetsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromSignalsRequestedSets indicates an expected call of SelectAllFromSignalsRequestedSets.
func (mr *MockTxMockRecorder) SelectAllFromSignalsRequestedSets(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromSignalsRequestedSets", reflect.TypeOf((*MockTx)(nil).SelectAllFromSignalsRequestedSets), ctx, filter)
}

// SelectAllFromTimerInfoMaps mocks base method.
func (m *MockTx) SelectAllFromTimerInfoMaps(ctx context.Context, filter TimerInfoMapsAllFilter) ([]TimerInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromTimerInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]TimerInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromTimerInfoMaps indicates an expected call of SelectAllFromTimerInfoMaps.
func (mr *MockTxMockRecorder) SelectAllFromTimerInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromTimerInfoMaps", reflect.TypeOf((*MockTx)(nil).SelectAllFromTimerInfoMaps), ctx, filter)
}

// SelectFromBufferedEvents mocks base method.
func (m *MockTx) SelectFromBufferedEvents(ctx context.Context, filter BufferedEventsFilter) ([]BufferedEventsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromBufferedEvents", ctx, filter)
	ret0, _ := ret[0].([]BufferedEventsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromBufferedEvents indicates an expected call of SelectFromBufferedEvents.
func (mr *MockTxMockRecorder) SelectFromBufferedEvents(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromBufferedEvents", reflect.TypeOf((*MockTx)(nil).SelectFromBufferedEvents), ctx, filter)
}

// SelectFromCurrentExecutions mocks base method.
func (m *MockTx) SelectFromCurrentExecutions(ctx context.Context, filter CurrentExecutionsFilter) (*CurrentExecutionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromCurrentExecutions", ctx, filter)
	ret0, _ := ret[0].(*CurrentExecutionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromCurrentExecutions indicates an expected call of SelectFromCurrentExecutions.
func (mr *MockTxMockRecorder) SelectFromCurrentExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromCurrentExecutions", reflect.TypeOf((*MockTx)(nil).SelectFromCurrentExecutions), ctx, filter)
}

// SelectFromExecutions mocks base method.
func (m *MockTx) SelectFromExecutions(ctx context.Context, filter ExecutionsFilter) (*ExecutionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromExecutions", ctx, filter)
	ret0, _ := ret[0].(*ExecutionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromExecutions indicates an expected call of SelectFromExecutions.
func (mr *MockTxMockRecorder) SelectFromExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromExecutions", reflect.TypeOf((*MockTx)(nil).SelectFromExecutions), ctx, filter)
}

// SelectFromHistoryTree mocks base method.
func (m *MockTx) SelectFromHistoryTree(ctx context.Context, filter HistoryTreeSelectFilter) ([]HistoryTreeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromHistoryTree", ctx, filter)
	ret0, _ := ret[0].([]HistoryTreeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromHistoryTree indicates an expected call of SelectFromHistoryTree.
func (mr *MockTxMockRecorder) SelectFromHistoryTree(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromHistoryTree", reflect.TypeOf((*MockTx)(nil).SelectFromHistoryTree), ctx, filter)
}

// SelectFromMessages mocks base method.
func (m *MockTx) SelectFromMessages(ctx context.Context, filter QueueMessagesFilter) ([]QueueMessageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromMessages", ctx, filter)
	ret0, _ := ret[0].([]QueueMessageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromMessages indicates an expected call of SelectFromMessages.
func (mr *MockTxMockRecorder) SelectFromMessages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromMessages", reflect.TypeOf((*MockTx)(nil).SelectFromMessages), ctx, filter)
}

// SelectFromNamespace mocks base method.
func (m *MockTx) SelectFromNamespace(ctx context.Context, filter NamespaceFilter) ([]NamespaceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromNamespace", ctx, filter)
	ret0, _ := ret[0].([]NamespaceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromNamespace indicates an expected call of SelectFromNamespace.
func (mr *MockTxMockRecorder) SelectFromNamespace(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromNamespace", reflect.TypeOf((*MockTx)(nil).SelectFromNamespace), ctx, filter)
}

// SelectFromNamespaceMetadata mocks base method.
func (m *MockTx) SelectFromNamespaceMetadata(ctx context.Context) (*NamespaceMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromNamespaceMetadata", ctx)
	ret0, _ := ret[0].(*NamespaceMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromNamespaceMetadata indicates an expected call of SelectFromNamespaceMetadata.
func (mr *MockTxMockRecorder) SelectFromNamespaceMetadata(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromNamespaceMetadata", reflect.TypeOf((*MockTx)(nil).SelectFromNamespaceMetadata), ctx)
}

// SelectFromQueueMetadata mocks base method.
func (m *MockTx) SelectFromQueueMetadata(ctx context.Context, filter QueueMetadataFilter) (*QueueMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromQueueMetadata", ctx, filter)
	ret0, _ := ret[0].(*QueueMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromQueueMetadata indicates an expected call of SelectFromQueueMetadata.
func (mr *MockTxMockRecorder) SelectFromQueueMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromQueueMetadata", reflect.TypeOf((*MockTx)(nil).SelectFromQueueMetadata), ctx, filter)
}

// SelectFromQueueV2Metadata mocks base method.
func (m *MockTx) SelectFromQueueV2Metadata(ctx context.Context, filter QueueV2MetadataFilter) (*QueueV2MetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromQueueV2Metadata", ctx, filter)
	ret0, _ := ret[0].(*QueueV2MetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromQueueV2Metadata indicates an expected call of SelectFromQueueV2Metadata.
func (mr *MockTxMockRecorder) SelectFromQueueV2Metadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromQueueV2Metadata", reflect.TypeOf((*MockTx)(nil).SelectFromQueueV2Metadata), ctx, filter)
}

// SelectFromQueueV2MetadataForUpdate mocks base method.
func (m *MockTx) SelectFromQueueV2MetadataForUpdate(ctx context.Context, filter QueueV2MetadataFilter) (*QueueV2MetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromQueueV2MetadataForUpdate", ctx, filter)
	ret0, _ := ret[0].(*QueueV2MetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromQueueV2MetadataForUpdate indicates an expected call of SelectFromQueueV2MetadataForUpdate.
func (mr *MockTxMockRecorder) SelectFromQueueV2MetadataForUpdate(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromQueueV2MetadataForUpdate", reflect.TypeOf((*MockTx)(nil).SelectFromQueueV2MetadataForUpdate), ctx, filter)
}

// SelectFromShards mocks base method.
func (m *MockTx) SelectFromShards(ctx context.Context, filter ShardsFilter) (*ShardsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromShards", ctx, filter)
	ret0, _ := ret[0].(*ShardsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromShards indicates an expected call of SelectFromShards.
func (mr *MockTxMockRecorder) SelectFromShards(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromShards", reflect.TypeOf((*MockTx)(nil).SelectFromShards), ctx, filter)
}

// SelectFromTaskQueues mocks base method.
func (m *MockTx) SelectFromTaskQueues(ctx context.Context, filter TaskQueuesFilter) ([]TaskQueuesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromTaskQueues", ctx, filter)
	ret0, _ := ret[0].([]TaskQueuesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromTaskQueues indicates an expected call of SelectFromTaskQueues.
func (mr *MockTxMockRecorder) SelectFromTaskQueues(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromTaskQueues", reflect.TypeOf((*MockTx)(nil).SelectFromTaskQueues), ctx, filter)
}

// SelectFromTasks mocks base method.
func (m *MockTx) SelectFromTasks(ctx context.Context, filter TasksFilter) ([]TasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromTasks", ctx, filter)
	ret0, _ := ret[0].([]TasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromTasks indicates an expected call of SelectFromTasks.
func (mr *MockTxMockRecorder) SelectFromTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromTasks", reflect.TypeOf((*MockTx)(nil).SelectFromTasks), ctx, filter)
}

// SelectFromVisibility mocks base method.
func (m *MockTx) SelectFromVisibility(ctx context.Context, filter VisibilitySelectFilter) ([]VisibilityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromVisibility", ctx, filter)
	ret0, _ := ret[0].([]VisibilityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromVisibility indicates an expected call of SelectFromVisibility.
func (mr *MockTxMockRecorder) SelectFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromVisibility", reflect.TypeOf((*MockTx)(nil).SelectFromVisibility), ctx, filter)
}

// SelectNameFromQueueV2Metadata mocks base method.
func (m *MockTx) SelectNameFromQueueV2Metadata(ctx context.Context, filter QueueV2MetadataTypeFilter) ([]QueueV2MetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectNameFromQueueV2Metadata", ctx, filter)
	ret0, _ := ret[0].([]QueueV2MetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectNameFromQueueV2Metadata indicates an expected call of SelectNameFromQueueV2Metadata.
func (mr *MockTxMockRecorder) SelectNameFromQueueV2Metadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectNameFromQueueV2Metadata", reflect.TypeOf((*MockTx)(nil).SelectNameFromQueueV2Metadata), ctx, filter)
}

// UpdateCurrentExecutions mocks base method.
func (m *MockTx) UpdateCurrentExecutions(ctx context.Context, row *CurrentExecutionsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrentExecutions", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCurrentExecutions indicates an expected call of UpdateCurrentExecutions.
func (mr *MockTxMockRecorder) UpdateCurrentExecutions(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrentExecutions", reflect.TypeOf((*MockTx)(nil).UpdateCurrentExecutions), ctx, row)
}

// UpdateExecutions mocks base method.
func (m *MockTx) UpdateExecutions(ctx context.Context, row *ExecutionsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExecutions", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExecutions indicates an expected call of UpdateExecutions.
func (mr *MockTxMockRecorder) UpdateExecutions(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExecutions", reflect.TypeOf((*MockTx)(nil).UpdateExecutions), ctx, row)
}

// UpdateNamespace mocks base method.
func (m *MockTx) UpdateNamespace(ctx context.Context, row *NamespaceRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespace", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespace indicates an expected call of UpdateNamespace.
func (mr *MockTxMockRecorder) UpdateNamespace(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockTx)(nil).UpdateNamespace), ctx, row)
}

// UpdateNamespaceMetadata mocks base method.
func (m *MockTx) UpdateNamespaceMetadata(ctx context.Context, row *NamespaceMetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespaceMetadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespaceMetadata indicates an expected call of UpdateNamespaceMetadata.
func (mr *MockTxMockRecorder) UpdateNamespaceMetadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceMetadata", reflect.TypeOf((*MockTx)(nil).UpdateNamespaceMetadata), ctx, row)
}

// UpdateNexusEndpoint mocks base method.
func (m *MockTx) UpdateNexusEndpoint(ctx context.Context, row *NexusEndpointsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNexusEndpoint", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNexusEndpoint indicates an expected call of UpdateNexusEndpoint.
func (mr *MockTxMockRecorder) UpdateNexusEndpoint(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNexusEndpoint", reflect.TypeOf((*MockTx)(nil).UpdateNexusEndpoint), ctx, row)
}

// UpdateQueueMetadata mocks base method.
func (m *MockTx) UpdateQueueMetadata(ctx context.Context, row *QueueMetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueMetadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueueMetadata indicates an expected call of UpdateQueueMetadata.
func (mr *MockTxMockRecorder) UpdateQueueMetadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueMetadata", reflect.TypeOf((*MockTx)(nil).UpdateQueueMetadata), ctx, row)
}

// UpdateQueueV2Metadata mocks base method.
func (m *MockTx) UpdateQueueV2Metadata(ctx context.Context, row *QueueV2MetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueV2Metadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueueV2Metadata indicates an expected call of UpdateQueueV2Metadata.
func (mr *MockTxMockRecorder) UpdateQueueV2Metadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueV2Metadata", reflect.TypeOf((*MockTx)(nil).UpdateQueueV2Metadata), ctx, row)
}

// UpdateShards mocks base method.
func (m *MockTx) UpdateShards(ctx context.Context, row *ShardsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShards", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShards indicates an expected call of UpdateShards.
func (mr *MockTxMockRecorder) UpdateShards(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShards", reflect.TypeOf((*MockTx)(nil).UpdateShards), ctx, row)
}

// UpdateTaskQueueUserData mocks base method.
func (m *MockTx) UpdateTaskQueueUserData(ctx context.Context, request *UpdateTaskQueueDataRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskQueueUserData", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskQueueUserData indicates an expected call of UpdateTaskQueueUserData.
func (mr *MockTxMockRecorder) UpdateTaskQueueUserData(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskQueueUserData", reflect.TypeOf((*MockTx)(nil).UpdateTaskQueueUserData), ctx, request)
}

// UpdateTaskQueues mocks base method.
func (m *MockTx) UpdateTaskQueues(ctx context.Context, row *TaskQueuesRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskQueues", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskQueues indicates an expected call of UpdateTaskQueues.
func (mr *MockTxMockRecorder) UpdateTaskQueues(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskQueues", reflect.TypeOf((*MockTx)(nil).UpdateTaskQueues), ctx, row)
}

// UpsertClusterMembership mocks base method.
func (m *MockTx) UpsertClusterMembership(ctx context.Context, row *ClusterMembershipRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertClusterMembership", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertClusterMembership indicates an expected call of UpsertClusterMembership.
func (mr *MockTxMockRecorder) UpsertClusterMembership(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertClusterMembership", reflect.TypeOf((*MockTx)(nil).UpsertClusterMembership), ctx, row)
}

// WriteLockExecutions mocks base method.
func (m *MockTx) WriteLockExecutions(ctx context.Context, filter ExecutionsFilter) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLockExecutions", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WriteLockExecutions indicates an expected call of WriteLockExecutions.
func (mr *MockTxMockRecorder) WriteLockExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLockExecutions", reflect.TypeOf((*MockTx)(nil).WriteLockExecutions), ctx, filter)
}

// WriteLockGetClusterMetadata mocks base method.
func (m *MockTx) WriteLockGetClusterMetadata(ctx context.Context, filter *ClusterMetadataFilter) (*ClusterMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLockGetClusterMetadata", ctx, filter)
	ret0, _ := ret[0].(*ClusterMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteLockGetClusterMetadata indicates an expected call of WriteLockGetClusterMetadata.
func (mr *MockTxMockRecorder) WriteLockGetClusterMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLockGetClusterMetadata", reflect.TypeOf((*MockTx)(nil).WriteLockGetClusterMetadata), ctx, filter)
}

// WriteLockShards mocks base method.
func (m *MockTx) WriteLockShards(ctx context.Context, filter ShardsFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLockShards", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteLockShards indicates an expected call of WriteLockShards.
func (mr *MockTxMockRecorder) WriteLockShards(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLockShards", reflect.TypeOf((*MockTx)(nil).WriteLockShards), ctx, filter)
}

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// AddToBuildIdToTaskQueueMapping mocks base method.
func (m *MockDB) AddToBuildIdToTaskQueueMapping(ctx context.Context, request AddToBuildIdToTaskQueueMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBuildIdToTaskQueueMapping", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBuildIdToTaskQueueMapping indicates an expected call of AddToBuildIdToTaskQueueMapping.
func (mr *MockDBMockRecorder) AddToBuildIdToTaskQueueMapping(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBuildIdToTaskQueueMapping", reflect.TypeOf((*MockDB)(nil).AddToBuildIdToTaskQueueMapping), ctx, request)
}

// BeginTx mocks base method.
func (m *MockDB) BeginTx(ctx context.Context) (Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDBMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDB)(nil).BeginTx), ctx)
}

// Close mocks base method.
func (m *MockDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// CountFromVisibility mocks base method.
func (m *MockDB) CountFromVisibility(ctx context.Context, filter VisibilitySelectFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFromVisibility", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFromVisibility indicates an expected call of CountFromVisibility.
func (mr *MockDBMockRecorder) CountFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFromVisibility", reflect.TypeOf((*MockDB)(nil).CountFromVisibility), ctx, filter)
}

// CountGroupByFromVisibility mocks base method.
func (m *MockDB) CountGroupByFromVisibility(ctx context.Context, filter VisibilitySelectFilter) ([]VisibilityCountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountGroupByFromVisibility", ctx, filter)
	ret0, _ := ret[0].([]VisibilityCountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountGroupByFromVisibility indicates an expected call of CountGroupByFromVisibility.
func (mr *MockDBMockRecorder) CountGroupByFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountGroupByFromVisibility", reflect.TypeOf((*MockDB)(nil).CountGroupByFromVisibility), ctx, filter)
}

// CountTaskQueuesByBuildId mocks base method.
func (m *MockDB) CountTaskQueuesByBuildId(ctx context.Context, request *CountTaskQueuesByBuildIdRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTaskQueuesByBuildId", ctx, request)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTaskQueuesByBuildId indicates an expected call of CountTaskQueuesByBuildId.
func (mr *MockDBMockRecorder) CountTaskQueuesByBuildId(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTaskQueuesByBuildId", reflect.TypeOf((*MockDB)(nil).CountTaskQueuesByBuildId), ctx, request)
}

// DbName mocks base method.
func (m *MockDB) DbName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DbName indicates an expected call of DbName.
func (mr *MockDBMockRecorder) DbName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbName", reflect.TypeOf((*MockDB)(nil).DbName))
}

// DeleteAllFromActivityInfoMaps mocks base method.
func (m *MockDB) DeleteAllFromActivityInfoMaps(ctx context.Context, filter ActivityInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromActivityInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromActivityInfoMaps indicates an expected call of DeleteAllFromActivityInfoMaps.
func (mr *MockDBMockRecorder) DeleteAllFromActivityInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromActivityInfoMaps", reflect.TypeOf((*MockDB)(nil).DeleteAllFromActivityInfoMaps), ctx, filter)
}

// DeleteAllFromChildExecutionInfoMaps mocks base method.
func (m *MockDB) DeleteAllFromChildExecutionInfoMaps(ctx context.Context, filter ChildExecutionInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromChildExecutionInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromChildExecutionInfoMaps indicates an expected call of DeleteAllFromChildExecutionInfoMaps.
func (mr *MockDBMockRecorder) DeleteAllFromChildExecutionInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromChildExecutionInfoMaps", reflect.TypeOf((*MockDB)(nil).DeleteAllFromChildExecutionInfoMaps), ctx, filter)
}

// DeleteAllFromRequestCancelInfoMaps mocks base method.
func (m *MockDB) DeleteAllFromRequestCancelInfoMaps(ctx context.Context, filter RequestCancelInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromRequestCancelInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromRequestCancelInfoMaps indicates an expected call of DeleteAllFromRequestCancelInfoMaps.
func (mr *MockDBMockRecorder) DeleteAllFromRequestCancelInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromRequestCancelInfoMaps", reflect.TypeOf((*MockDB)(nil).DeleteAllFromRequestCancelInfoMaps), ctx, filter)
}

// DeleteAllFromSignalInfoMaps mocks base method.
func (m *MockDB) DeleteAllFromSignalInfoMaps(ctx context.Context, filter SignalInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromSignalInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromSignalInfoMaps indicates an expected call of DeleteAllFromSignalInfoMaps.
func (mr *MockDBMockRecorder) DeleteAllFromSignalInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromSignalInfoMaps", reflect.TypeOf((*MockDB)(nil).DeleteAllFromSignalInfoMaps), ctx, filter)
}

// DeleteAllFromSignalsRequestedSets mocks base method.
func (m *MockDB) DeleteAllFromSignalsRequestedSets(ctx context.Context, filter SignalsRequestedSetsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromSignalsRequestedSets", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromSignalsRequestedSets indicates an expected call of DeleteAllFromSignalsRequestedSets.
func (mr *MockDBMockRecorder) DeleteAllFromSignalsRequestedSets(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromSignalsRequestedSets", reflect.TypeOf((*MockDB)(nil).DeleteAllFromSignalsRequestedSets), ctx, filter)
}

// DeleteAllFromTimerInfoMaps mocks base method.
func (m *MockDB) DeleteAllFromTimerInfoMaps(ctx context.Context, filter TimerInfoMapsAllFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFromTimerInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllFromTimerInfoMaps indicates an expected call of DeleteAllFromTimerInfoMaps.
func (mr *MockDBMockRecorder) DeleteAllFromTimerInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFromTimerInfoMaps", reflect.TypeOf((*MockDB)(nil).DeleteAllFromTimerInfoMaps), ctx, filter)
}

// DeleteClusterMetadata mocks base method.
func (m *MockDB) DeleteClusterMetadata(ctx context.Context, filter *ClusterMetadataFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterMetadata", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterMetadata indicates an expected call of DeleteClusterMetadata.
func (mr *MockDBMockRecorder) DeleteClusterMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterMetadata", reflect.TypeOf((*MockDB)(nil).DeleteClusterMetadata), ctx, filter)
}

// DeleteFromActivityInfoMaps mocks base method.
func (m *MockDB) DeleteFromActivityInfoMaps(ctx context.Context, filter ActivityInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromActivityInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromActivityInfoMaps indicates an expected call of DeleteFromActivityInfoMaps.
func (mr *MockDBMockRecorder) DeleteFromActivityInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromActivityInfoMaps", reflect.TypeOf((*MockDB)(nil).DeleteFromActivityInfoMaps), ctx, filter)
}

// DeleteFromBufferedEvents mocks base method.
func (m *MockDB) DeleteFromBufferedEvents(ctx context.Context, filter BufferedEventsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromBufferedEvents", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromBufferedEvents indicates an expected call of DeleteFromBufferedEvents.
func (mr *MockDBMockRecorder) DeleteFromBufferedEvents(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromBufferedEvents", reflect.TypeOf((*MockDB)(nil).DeleteFromBufferedEvents), ctx, filter)
}

// DeleteFromChildExecutionInfoMaps mocks base method.
func (m *MockDB) DeleteFromChildExecutionInfoMaps(ctx context.Context, filter ChildExecutionInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromChildExecutionInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromChildExecutionInfoMaps indicates an expected call of DeleteFromChildExecutionInfoMaps.
func (mr *MockDBMockRecorder) DeleteFromChildExecutionInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromChildExecutionInfoMaps", reflect.TypeOf((*MockDB)(nil).DeleteFromChildExecutionInfoMaps), ctx, filter)
}

// DeleteFromCurrentExecutions mocks base method.
func (m *MockDB) DeleteFromCurrentExecutions(ctx context.Context, filter CurrentExecutionsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromCurrentExecutions", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromCurrentExecutions indicates an expected call of DeleteFromCurrentExecutions.
func (mr *MockDBMockRecorder) DeleteFromCurrentExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromCurrentExecutions", reflect.TypeOf((*MockDB)(nil).DeleteFromCurrentExecutions), ctx, filter)
}

// DeleteFromExecutions mocks base method.
func (m *MockDB) DeleteFromExecutions(ctx context.Context, filter ExecutionsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromExecutions", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromExecutions indicates an expected call of DeleteFromExecutions.
func (mr *MockDBMockRecorder) DeleteFromExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromExecutions", reflect.TypeOf((*MockDB)(nil).DeleteFromExecutions), ctx, filter)
}

// DeleteFromHistoryImmediateTasks mocks base method.
func (m *MockDB) DeleteFromHistoryImmediateTasks(ctx context.Context, filter HistoryImmediateTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromHistoryImmediateTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromHistoryImmediateTasks indicates an expected call of DeleteFromHistoryImmediateTasks.
func (mr *MockDBMockRecorder) DeleteFromHistoryImmediateTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromHistoryImmediateTasks", reflect.TypeOf((*MockDB)(nil).DeleteFromHistoryImmediateTasks), ctx, filter)
}

// DeleteFromHistoryNode mocks base method.
func (m *MockDB) DeleteFromHistoryNode(ctx context.Context, row *HistoryNodeRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromHistoryNode", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromHistoryNode indicates an expected call of DeleteFromHistoryNode.
func (mr *MockDBMockRecorder) DeleteFromHistoryNode(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromHistoryNode", reflect.TypeOf((*MockDB)(nil).DeleteFromHistoryNode), ctx, row)
}

// DeleteFromHistoryScheduledTasks mocks base method.
func (m *MockDB) DeleteFromHistoryScheduledTasks(ctx context.Context, filter HistoryScheduledTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromHistoryScheduledTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromHistoryScheduledTasks indicates an expected call of DeleteFromHistoryScheduledTasks.
func (mr *MockDBMockRecorder) DeleteFromHistoryScheduledTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromHistoryScheduledTasks", reflect.TypeOf((*MockDB)(nil).DeleteFromHistoryScheduledTasks), ctx, filter)
}

// DeleteFromHistoryTree mocks base method.
func (m *MockDB) DeleteFromHistoryTree(ctx context.Context, filter HistoryTreeDeleteFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromHistoryTree", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromHistoryTree indicates an expected call of DeleteFromHistoryTree.
func (mr *MockDBMockRecorder) DeleteFromHistoryTree(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromHistoryTree", reflect.TypeOf((*MockDB)(nil).DeleteFromHistoryTree), ctx, filter)
}

// DeleteFromMessages mocks base method.
func (m *MockDB) DeleteFromMessages(ctx context.Context, filter QueueMessagesFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromMessages", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromMessages indicates an expected call of DeleteFromMessages.
func (mr *MockDBMockRecorder) DeleteFromMessages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromMessages", reflect.TypeOf((*MockDB)(nil).DeleteFromMessages), ctx, filter)
}

// DeleteFromNamespace mocks base method.
func (m *MockDB) DeleteFromNamespace(ctx context.Context, filter NamespaceFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromNamespace", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromNamespace indicates an expected call of DeleteFromNamespace.
func (mr *MockDBMockRecorder) DeleteFromNamespace(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromNamespace", reflect.TypeOf((*MockDB)(nil).DeleteFromNamespace), ctx, filter)
}

// DeleteFromNexusEndpoints mocks base method.
func (m *MockDB) DeleteFromNexusEndpoints(ctx context.Context, id []byte) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromNexusEndpoints", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromNexusEndpoints indicates an expected call of DeleteFromNexusEndpoints.
func (mr *MockDBMockRecorder) DeleteFromNexusEndpoints(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromNexusEndpoints", reflect.TypeOf((*MockDB)(nil).DeleteFromNexusEndpoints), ctx, id)
}

// DeleteFromReplicationDLQTasks mocks base method.
func (m *MockDB) DeleteFromReplicationDLQTasks(ctx context.Context, filter ReplicationDLQTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromReplicationDLQTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromReplicationDLQTasks indicates an expected call of DeleteFromReplicationDLQTasks.
func (mr *MockDBMockRecorder) DeleteFromReplicationDLQTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromReplicationDLQTasks", reflect.TypeOf((*MockDB)(nil).DeleteFromReplicationDLQTasks), ctx, filter)
}

// DeleteFromReplicationTasks mocks base method.
func (m *MockDB) DeleteFromReplicationTasks(ctx context.Context, filter ReplicationTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromReplicationTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromReplicationTasks indicates an expected call of DeleteFromReplicationTasks.
func (mr *MockDBMockRecorder) DeleteFromReplicationTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromReplicationTasks", reflect.TypeOf((*MockDB)(nil).DeleteFromReplicationTasks), ctx, filter)
}

// DeleteFromRequestCancelInfoMaps mocks base method.
func (m *MockDB) DeleteFromRequestCancelInfoMaps(ctx context.Context, filter RequestCancelInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromRequestCancelInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromRequestCancelInfoMaps indicates an expected call of DeleteFromRequestCancelInfoMaps.
func (mr *MockDBMockRecorder) DeleteFromRequestCancelInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromRequestCancelInfoMaps", reflect.TypeOf((*MockDB)(nil).DeleteFromRequestCancelInfoMaps), ctx, filter)
}

// DeleteFromSignalInfoMaps mocks base method.
func (m *MockDB) DeleteFromSignalInfoMaps(ctx context.Context, filter SignalInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromSignalInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromSignalInfoMaps indicates an expected call of DeleteFromSignalInfoMaps.
func (mr *MockDBMockRecorder) DeleteFromSignalInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromSignalInfoMaps", reflect.TypeOf((*MockDB)(nil).DeleteFromSignalInfoMaps), ctx, filter)
}

// DeleteFromSignalsRequestedSets mocks base method.
func (m *MockDB) DeleteFromSignalsRequestedSets(ctx context.Context, filter SignalsRequestedSetsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromSignalsRequestedSets", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromSignalsRequestedSets indicates an expected call of DeleteFromSignalsRequestedSets.
func (mr *MockDBMockRecorder) DeleteFromSignalsRequestedSets(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromSignalsRequestedSets", reflect.TypeOf((*MockDB)(nil).DeleteFromSignalsRequestedSets), ctx, filter)
}

// DeleteFromTaskQueues mocks base method.
func (m *MockDB) DeleteFromTaskQueues(ctx context.Context, filter TaskQueuesFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTaskQueues", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTaskQueues indicates an expected call of DeleteFromTaskQueues.
func (mr *MockDBMockRecorder) DeleteFromTaskQueues(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTaskQueues", reflect.TypeOf((*MockDB)(nil).DeleteFromTaskQueues), ctx, filter)
}

// DeleteFromTasks mocks base method.
func (m *MockDB) DeleteFromTasks(ctx context.Context, filter TasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTasks indicates an expected call of DeleteFromTasks.
func (mr *MockDBMockRecorder) DeleteFromTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTasks", reflect.TypeOf((*MockDB)(nil).DeleteFromTasks), ctx, filter)
}

// DeleteFromTimerInfoMaps mocks base method.
func (m *MockDB) DeleteFromTimerInfoMaps(ctx context.Context, filter TimerInfoMapsFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTimerInfoMaps", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTimerInfoMaps indicates an expected call of DeleteFromTimerInfoMaps.
func (mr *MockDBMockRecorder) DeleteFromTimerInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTimerInfoMaps", reflect.TypeOf((*MockDB)(nil).DeleteFromTimerInfoMaps), ctx, filter)
}

// DeleteFromTimerTasks mocks base method.
func (m *MockDB) DeleteFromTimerTasks(ctx context.Context, filter TimerTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTimerTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTimerTasks indicates an expected call of DeleteFromTimerTasks.
func (mr *MockDBMockRecorder) DeleteFromTimerTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTimerTasks", reflect.TypeOf((*MockDB)(nil).DeleteFromTimerTasks), ctx, filter)
}

// DeleteFromTransferTasks mocks base method.
func (m *MockDB) DeleteFromTransferTasks(ctx context.Context, filter TransferTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTransferTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromTransferTasks indicates an expected call of DeleteFromTransferTasks.
func (mr *MockDBMockRecorder) DeleteFromTransferTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTransferTasks", reflect.TypeOf((*MockDB)(nil).DeleteFromTransferTasks), ctx, filter)
}

// DeleteFromVisibility mocks base method.
func (m *MockDB) DeleteFromVisibility(ctx context.Context, filter VisibilityDeleteFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromVisibility", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromVisibility indicates an expected call of DeleteFromVisibility.
func (mr *MockDBMockRecorder) DeleteFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromVisibility", reflect.TypeOf((*MockDB)(nil).DeleteFromVisibility), ctx, filter)
}

// DeleteFromVisibilityTasks mocks base method.
func (m *MockDB) DeleteFromVisibilityTasks(ctx context.Context, filter VisibilityTasksFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromVisibilityTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromVisibilityTasks indicates an expected call of DeleteFromVisibilityTasks.
func (mr *MockDBMockRecorder) DeleteFromVisibilityTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromVisibilityTasks", reflect.TypeOf((*MockDB)(nil).DeleteFromVisibilityTasks), ctx, filter)
}

// GetClusterMembers mocks base method.
func (m *MockDB) GetClusterMembers(ctx context.Context, filter *ClusterMembershipFilter) ([]ClusterMembershipRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMembers", ctx, filter)
	ret0, _ := ret[0].([]ClusterMembershipRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMembers indicates an expected call of GetClusterMembers.
func (mr *MockDBMockRecorder) GetClusterMembers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMembers", reflect.TypeOf((*MockDB)(nil).GetClusterMembers), ctx, filter)
}

// GetClusterMetadata mocks base method.
func (m *MockDB) GetClusterMetadata(ctx context.Context, filter *ClusterMetadataFilter) (*ClusterMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMetadata", ctx, filter)
	ret0, _ := ret[0].(*ClusterMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMetadata indicates an expected call of GetClusterMetadata.
func (mr *MockDBMockRecorder) GetClusterMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMetadata", reflect.TypeOf((*MockDB)(nil).GetClusterMetadata), ctx, filter)
}

// GetFromVisibility mocks base method.
func (m *MockDB) GetFromVisibility(ctx context.Context, filter VisibilityGetFilter) (*VisibilityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromVisibility", ctx, filter)
	ret0, _ := ret[0].(*VisibilityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromVisibility indicates an expected call of GetFromVisibility.
func (mr *MockDBMockRecorder) GetFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromVisibility", reflect.TypeOf((*MockDB)(nil).GetFromVisibility), ctx, filter)
}

// GetLastEnqueuedMessageIDForUpdate mocks base method.
func (m *MockDB) GetLastEnqueuedMessageIDForUpdate(ctx context.Context, queueType persistence.QueueType) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastEnqueuedMessageIDForUpdate", ctx, queueType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastEnqueuedMessageIDForUpdate indicates an expected call of GetLastEnqueuedMessageIDForUpdate.
func (mr *MockDBMockRecorder) GetLastEnqueuedMessageIDForUpdate(ctx, queueType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEnqueuedMessageIDForUpdate", reflect.TypeOf((*MockDB)(nil).GetLastEnqueuedMessageIDForUpdate), ctx, queueType)
}

// GetLastEnqueuedMessageIDForUpdateV2 mocks base method.
func (m *MockDB) GetLastEnqueuedMessageIDForUpdateV2(ctx context.Context, filter QueueV2Filter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastEnqueuedMessageIDForUpdateV2", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastEnqueuedMessageIDForUpdateV2 indicates an expected call of GetLastEnqueuedMessageIDForUpdateV2.
func (mr *MockDBMockRecorder) GetLastEnqueuedMessageIDForUpdateV2(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEnqueuedMessageIDForUpdateV2", reflect.TypeOf((*MockDB)(nil).GetLastEnqueuedMessageIDForUpdateV2), ctx, filter)
}

// GetNexusEndpointByID mocks base method.
func (m *MockDB) GetNexusEndpointByID(ctx context.Context, serviceID []byte) (*NexusEndpointsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNexusEndpointByID", ctx, serviceID)
	ret0, _ := ret[0].(*NexusEndpointsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusEndpointByID indicates an expected call of GetNexusEndpointByID.
func (mr *MockDBMockRecorder) GetNexusEndpointByID(ctx, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusEndpointByID", reflect.TypeOf((*MockDB)(nil).GetNexusEndpointByID), ctx, serviceID)
}

// GetNexusEndpointsTableVersion mocks base method.
func (m *MockDB) GetNexusEndpointsTableVersion(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNexusEndpointsTableVersion", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusEndpointsTableVersion indicates an expected call of GetNexusEndpointsTableVersion.
func (mr *MockDBMockRecorder) GetNexusEndpointsTableVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusEndpointsTableVersion", reflect.TypeOf((*MockDB)(nil).GetNexusEndpointsTableVersion), ctx)
}

// GetTaskQueueUserData mocks base method.
func (m *MockDB) GetTaskQueueUserData(ctx context.Context, request *GetTaskQueueUserDataRequest) (*VersionedBlob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskQueueUserData", ctx, request)
	ret0, _ := ret[0].(*VersionedBlob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskQueueUserData indicates an expected call of GetTaskQueueUserData.
func (mr *MockDBMockRecorder) GetTaskQueueUserData(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskQueueUserData", reflect.TypeOf((*MockDB)(nil).GetTaskQueueUserData), ctx, request)
}

// GetTaskQueuesByBuildId mocks base method.
func (m *MockDB) GetTaskQueuesByBuildId(ctx context.Context, request *GetTaskQueuesByBuildIdRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskQueuesByBuildId", ctx, request)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskQueuesByBuildId indicates an expected call of GetTaskQueuesByBuildId.
func (mr *MockDBMockRecorder) GetTaskQueuesByBuildId(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskQueuesByBuildId", reflect.TypeOf((*MockDB)(nil).GetTaskQueuesByBuildId), ctx, request)
}

// IncrementNexusEndpointsTableVersion mocks base method.
func (m *MockDB) IncrementNexusEndpointsTableVersion(ctx context.Context, lastKnownTableVersion int64) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementNexusEndpointsTableVersion", ctx, lastKnownTableVersion)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementNexusEndpointsTableVersion indicates an expected call of IncrementNexusEndpointsTableVersion.
func (mr *MockDBMockRecorder) IncrementNexusEndpointsTableVersion(ctx, lastKnownTableVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementNexusEndpointsTableVersion", reflect.TypeOf((*MockDB)(nil).IncrementNexusEndpointsTableVersion), ctx, lastKnownTableVersion)
}

// InitializeNexusEndpointsTableVersion mocks base method.
func (m *MockDB) InitializeNexusEndpointsTableVersion(ctx context.Context) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeNexusEndpointsTableVersion", ctx)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeNexusEndpointsTableVersion indicates an expected call of InitializeNexusEndpointsTableVersion.
func (mr *MockDBMockRecorder) InitializeNexusEndpointsTableVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeNexusEndpointsTableVersion", reflect.TypeOf((*MockDB)(nil).InitializeNexusEndpointsTableVersion), ctx)
}

// InsertIntoBufferedEvents mocks base method.
func (m *MockDB) InsertIntoBufferedEvents(ctx context.Context, rows []BufferedEventsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoBufferedEvents", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoBufferedEvents indicates an expected call of InsertIntoBufferedEvents.
func (mr *MockDBMockRecorder) InsertIntoBufferedEvents(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoBufferedEvents", reflect.TypeOf((*MockDB)(nil).InsertIntoBufferedEvents), ctx, rows)
}

// InsertIntoCurrentExecutions mocks base method.
func (m *MockDB) InsertIntoCurrentExecutions(ctx context.Context, row *CurrentExecutionsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoCurrentExecutions", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoCurrentExecutions indicates an expected call of InsertIntoCurrentExecutions.
func (mr *MockDBMockRecorder) InsertIntoCurrentExecutions(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoCurrentExecutions", reflect.TypeOf((*MockDB)(nil).InsertIntoCurrentExecutions), ctx, row)
}

// InsertIntoExecutions mocks base method.
func (m *MockDB) InsertIntoExecutions(ctx context.Context, row *ExecutionsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoExecutions", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoExecutions indicates an expected call of InsertIntoExecutions.
func (mr *MockDBMockRecorder) InsertIntoExecutions(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoExecutions", reflect.TypeOf((*MockDB)(nil).InsertIntoExecutions), ctx, row)
}

// InsertIntoHistoryImmediateTasks mocks base method.
func (m *MockDB) InsertIntoHistoryImmediateTasks(ctx context.Context, rows []HistoryImmediateTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoHistoryImmediateTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoHistoryImmediateTasks indicates an expected call of InsertIntoHistoryImmediateTasks.
func (mr *MockDBMockRecorder) InsertIntoHistoryImmediateTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoHistoryImmediateTasks", reflect.TypeOf((*MockDB)(nil).InsertIntoHistoryImmediateTasks), ctx, rows)
}

// InsertIntoHistoryNode mocks base method.
func (m *MockDB) InsertIntoHistoryNode(ctx context.Context, row *HistoryNodeRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoHistoryNode", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoHistoryNode indicates an expected call of InsertIntoHistoryNode.
func (mr *MockDBMockRecorder) InsertIntoHistoryNode(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoHistoryNode", reflect.TypeOf((*MockDB)(nil).InsertIntoHistoryNode), ctx, row)
}

// InsertIntoHistoryScheduledTasks mocks base method.
func (m *MockDB) InsertIntoHistoryScheduledTasks(ctx context.Context, rows []HistoryScheduledTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoHistoryScheduledTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoHistoryScheduledTasks indicates an expected call of InsertIntoHistoryScheduledTasks.
func (mr *MockDBMockRecorder) InsertIntoHistoryScheduledTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoHistoryScheduledTasks", reflect.TypeOf((*MockDB)(nil).InsertIntoHistoryScheduledTasks), ctx, rows)
}

// InsertIntoHistoryTree mocks base method.
func (m *MockDB) InsertIntoHistoryTree(ctx context.Context, row *HistoryTreeRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoHistoryTree", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoHistoryTree indicates an expected call of InsertIntoHistoryTree.
func (mr *MockDBMockRecorder) InsertIntoHistoryTree(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoHistoryTree", reflect.TypeOf((*MockDB)(nil).InsertIntoHistoryTree), ctx, row)
}

// InsertIntoMessages mocks base method.
func (m *MockDB) InsertIntoMessages(ctx context.Context, row []QueueMessageRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoMessages", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoMessages indicates an expected call of InsertIntoMessages.
func (mr *MockDBMockRecorder) InsertIntoMessages(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoMessages", reflect.TypeOf((*MockDB)(nil).InsertIntoMessages), ctx, row)
}

// InsertIntoNamespace mocks base method.
func (m *MockDB) InsertIntoNamespace(ctx context.Context, rows *NamespaceRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoNamespace", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoNamespace indicates an expected call of InsertIntoNamespace.
func (mr *MockDBMockRecorder) InsertIntoNamespace(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoNamespace", reflect.TypeOf((*MockDB)(nil).InsertIntoNamespace), ctx, rows)
}

// InsertIntoNexusEndpoints mocks base method.
func (m *MockDB) InsertIntoNexusEndpoints(ctx context.Context, row *NexusEndpointsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoNexusEndpoints", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoNexusEndpoints indicates an expected call of InsertIntoNexusEndpoints.
func (mr *MockDBMockRecorder) InsertIntoNexusEndpoints(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoNexusEndpoints", reflect.TypeOf((*MockDB)(nil).InsertIntoNexusEndpoints), ctx, row)
}

// InsertIntoQueueMetadata mocks base method.
func (m *MockDB) InsertIntoQueueMetadata(ctx context.Context, row *QueueMetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoQueueMetadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoQueueMetadata indicates an expected call of InsertIntoQueueMetadata.
func (mr *MockDBMockRecorder) InsertIntoQueueMetadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoQueueMetadata", reflect.TypeOf((*MockDB)(nil).InsertIntoQueueMetadata), ctx, row)
}

// InsertIntoQueueV2Messages mocks base method.
func (m *MockDB) InsertIntoQueueV2Messages(ctx context.Context, row []QueueV2MessageRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoQueueV2Messages", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoQueueV2Messages indicates an expected call of InsertIntoQueueV2Messages.
func (mr *MockDBMockRecorder) InsertIntoQueueV2Messages(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoQueueV2Messages", reflect.TypeOf((*MockDB)(nil).InsertIntoQueueV2Messages), ctx, row)
}

// InsertIntoQueueV2Metadata mocks base method.
func (m *MockDB) InsertIntoQueueV2Metadata(ctx context.Context, row *QueueV2MetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoQueueV2Metadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoQueueV2Metadata indicates an expected call of InsertIntoQueueV2Metadata.
func (mr *MockDBMockRecorder) InsertIntoQueueV2Metadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoQueueV2Metadata", reflect.TypeOf((*MockDB)(nil).InsertIntoQueueV2Metadata), ctx, row)
}

// InsertIntoReplicationDLQTasks mocks base method.
func (m *MockDB) InsertIntoReplicationDLQTasks(ctx context.Context, row []ReplicationDLQTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoReplicationDLQTasks", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoReplicationDLQTasks indicates an expected call of InsertIntoReplicationDLQTasks.
func (mr *MockDBMockRecorder) InsertIntoReplicationDLQTasks(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoReplicationDLQTasks", reflect.TypeOf((*MockDB)(nil).InsertIntoReplicationDLQTasks), ctx, row)
}

// InsertIntoReplicationTasks mocks base method.
func (m *MockDB) InsertIntoReplicationTasks(ctx context.Context, rows []ReplicationTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoReplicationTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoReplicationTasks indicates an expected call of InsertIntoReplicationTasks.
func (mr *MockDBMockRecorder) InsertIntoReplicationTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoReplicationTasks", reflect.TypeOf((*MockDB)(nil).InsertIntoReplicationTasks), ctx, rows)
}

// InsertIntoShards mocks base method.
func (m *MockDB) InsertIntoShards(ctx context.Context, rows *ShardsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoShards", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoShards indicates an expected call of InsertIntoShards.
func (mr *MockDBMockRecorder) InsertIntoShards(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoShards", reflect.TypeOf((*MockDB)(nil).InsertIntoShards), ctx, rows)
}

// InsertIntoTaskQueues mocks base method.
func (m *MockDB) InsertIntoTaskQueues(ctx context.Context, row *TaskQueuesRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoTaskQueues", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoTaskQueues indicates an expected call of InsertIntoTaskQueues.
func (mr *MockDBMockRecorder) InsertIntoTaskQueues(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoTaskQueues", reflect.TypeOf((*MockDB)(nil).InsertIntoTaskQueues), ctx, row)
}

// InsertIntoTasks mocks base method.
func (m *MockDB) InsertIntoTasks(ctx context.Context, rows []TasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoTasks indicates an expected call of InsertIntoTasks.
func (mr *MockDBMockRecorder) InsertIntoTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoTasks", reflect.TypeOf((*MockDB)(nil).InsertIntoTasks), ctx, rows)
}

// InsertIntoTimerTasks mocks base method.
func (m *MockDB) InsertIntoTimerTasks(ctx context.Context, rows []TimerTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoTimerTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoTimerTasks indicates an expected call of InsertIntoTimerTasks.
func (mr *MockDBMockRecorder) InsertIntoTimerTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoTimerTasks", reflect.TypeOf((*MockDB)(nil).InsertIntoTimerTasks), ctx, rows)
}

// InsertIntoTransferTasks mocks base method.
func (m *MockDB) InsertIntoTransferTasks(ctx context.Context, rows []TransferTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoTransferTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoTransferTasks indicates an expected call of InsertIntoTransferTasks.
func (mr *MockDBMockRecorder) InsertIntoTransferTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoTransferTasks", reflect.TypeOf((*MockDB)(nil).InsertIntoTransferTasks), ctx, rows)
}

// InsertIntoVisibility mocks base method.
func (m *MockDB) InsertIntoVisibility(ctx context.Context, row *VisibilityRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoVisibility", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoVisibility indicates an expected call of InsertIntoVisibility.
func (mr *MockDBMockRecorder) InsertIntoVisibility(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoVisibility", reflect.TypeOf((*MockDB)(nil).InsertIntoVisibility), ctx, row)
}

// InsertIntoVisibilityTasks mocks base method.
func (m *MockDB) InsertIntoVisibilityTasks(ctx context.Context, rows []VisibilityTasksRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoVisibilityTasks", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoVisibilityTasks indicates an expected call of InsertIntoVisibilityTasks.
func (mr *MockDBMockRecorder) InsertIntoVisibilityTasks(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoVisibilityTasks", reflect.TypeOf((*MockDB)(nil).InsertIntoVisibilityTasks), ctx, rows)
}

// IsDupEntryError mocks base method.
func (m *MockDB) IsDupEntryError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDupEntryError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDupEntryError indicates an expected call of IsDupEntryError.
func (mr *MockDBMockRecorder) IsDupEntryError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDupEntryError", reflect.TypeOf((*MockDB)(nil).IsDupEntryError), err)
}

// ListClusterMetadata mocks base method.
func (m *MockDB) ListClusterMetadata(ctx context.Context, filter *ClusterMetadataFilter) ([]ClusterMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterMetadata", ctx, filter)
	ret0, _ := ret[0].([]ClusterMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterMetadata indicates an expected call of ListClusterMetadata.
func (mr *MockDBMockRecorder) ListClusterMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterMetadata", reflect.TypeOf((*MockDB)(nil).ListClusterMetadata), ctx, filter)
}

// ListNexusEndpoints mocks base method.
func (m *MockDB) ListNexusEndpoints(ctx context.Context, request *ListNexusEndpointsRequest) ([]NexusEndpointsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNexusEndpoints", ctx, request)
	ret0, _ := ret[0].([]NexusEndpointsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNexusEndpoints indicates an expected call of ListNexusEndpoints.
func (mr *MockDBMockRecorder) ListNexusEndpoints(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNexusEndpoints", reflect.TypeOf((*MockDB)(nil).ListNexusEndpoints), ctx, request)
}

// ListTaskQueueUserDataEntries mocks base method.
func (m *MockDB) ListTaskQueueUserDataEntries(ctx context.Context, request *ListTaskQueueUserDataEntriesRequest) ([]TaskQueueUserDataEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaskQueueUserDataEntries", ctx, request)
	ret0, _ := ret[0].([]TaskQueueUserDataEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaskQueueUserDataEntries indicates an expected call of ListTaskQueueUserDataEntries.
func (mr *MockDBMockRecorder) ListTaskQueueUserDataEntries(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaskQueueUserDataEntries", reflect.TypeOf((*MockDB)(nil).ListTaskQueueUserDataEntries), ctx, request)
}

// LockCurrentExecutions mocks base method.
func (m *MockDB) LockCurrentExecutions(ctx context.Context, filter CurrentExecutionsFilter) (*CurrentExecutionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockCurrentExecutions", ctx, filter)
	ret0, _ := ret[0].(*CurrentExecutionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockCurrentExecutions indicates an expected call of LockCurrentExecutions.
func (mr *MockDBMockRecorder) LockCurrentExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockCurrentExecutions", reflect.TypeOf((*MockDB)(nil).LockCurrentExecutions), ctx, filter)
}

// LockCurrentExecutionsJoinExecutions mocks base method.
func (m *MockDB) LockCurrentExecutionsJoinExecutions(ctx context.Context, filter CurrentExecutionsFilter) ([]CurrentExecutionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockCurrentExecutionsJoinExecutions", ctx, filter)
	ret0, _ := ret[0].([]CurrentExecutionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockCurrentExecutionsJoinExecutions indicates an expected call of LockCurrentExecutionsJoinExecutions.
func (mr *MockDBMockRecorder) LockCurrentExecutionsJoinExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockCurrentExecutionsJoinExecutions", reflect.TypeOf((*MockDB)(nil).LockCurrentExecutionsJoinExecutions), ctx, filter)
}

// LockNamespaceMetadata mocks base method.
func (m *MockDB) LockNamespaceMetadata(ctx context.Context) (*NamespaceMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockNamespaceMetadata", ctx)
	ret0, _ := ret[0].(*NamespaceMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockNamespaceMetadata indicates an expected call of LockNamespaceMetadata.
func (mr *MockDBMockRecorder) LockNamespaceMetadata(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockNamespaceMetadata", reflect.TypeOf((*MockDB)(nil).LockNamespaceMetadata), ctx)
}

// LockQueueMetadata mocks base method.
func (m *MockDB) LockQueueMetadata(ctx context.Context, filter QueueMetadataFilter) (*QueueMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockQueueMetadata", ctx, filter)
	ret0, _ := ret[0].(*QueueMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockQueueMetadata indicates an expected call of LockQueueMetadata.
func (mr *MockDBMockRecorder) LockQueueMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockQueueMetadata", reflect.TypeOf((*MockDB)(nil).LockQueueMetadata), ctx, filter)
}

// LockTaskQueues mocks base method.
func (m *MockDB) LockTaskQueues(ctx context.Context, filter TaskQueuesFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockTaskQueues", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockTaskQueues indicates an expected call of LockTaskQueues.
func (mr *MockDBMockRecorder) LockTaskQueues(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockTaskQueues", reflect.TypeOf((*MockDB)(nil).LockTaskQueues), ctx, filter)
}

// PaginateBranchesFromHistoryTree mocks base method.
func (m *MockDB) PaginateBranchesFromHistoryTree(ctx context.Context, filter HistoryTreeBranchPage) ([]HistoryTreeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginateBranchesFromHistoryTree", ctx, filter)
	ret0, _ := ret[0].([]HistoryTreeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaginateBranchesFromHistoryTree indicates an expected call of PaginateBranchesFromHistoryTree.
func (mr *MockDBMockRecorder) PaginateBranchesFromHistoryTree(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginateBranchesFromHistoryTree", reflect.TypeOf((*MockDB)(nil).PaginateBranchesFromHistoryTree), ctx, filter)
}

// PluginName mocks base method.
func (m *MockDB) PluginName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginName")
	ret0, _ := ret[0].(string)
	return ret0
}

// PluginName indicates an expected call of PluginName.
func (mr *MockDBMockRecorder) PluginName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginName", reflect.TypeOf((*MockDB)(nil).PluginName))
}

// PruneClusterMembership mocks base method.
func (m *MockDB) PruneClusterMembership(ctx context.Context, filter *PruneClusterMembershipFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneClusterMembership", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PruneClusterMembership indicates an expected call of PruneClusterMembership.
func (mr *MockDBMockRecorder) PruneClusterMembership(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneClusterMembership", reflect.TypeOf((*MockDB)(nil).PruneClusterMembership), ctx, filter)
}

// RangeDeleteFromHistoryImmediateTasks mocks base method.
func (m *MockDB) RangeDeleteFromHistoryImmediateTasks(ctx context.Context, filter HistoryImmediateTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromHistoryImmediateTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromHistoryImmediateTasks indicates an expected call of RangeDeleteFromHistoryImmediateTasks.
func (mr *MockDBMockRecorder) RangeDeleteFromHistoryImmediateTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromHistoryImmediateTasks", reflect.TypeOf((*MockDB)(nil).RangeDeleteFromHistoryImmediateTasks), ctx, filter)
}

// RangeDeleteFromHistoryNode mocks base method.
func (m *MockDB) RangeDeleteFromHistoryNode(ctx context.Context, filter HistoryNodeDeleteFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromHistoryNode", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromHistoryNode indicates an expected call of RangeDeleteFromHistoryNode.
func (mr *MockDBMockRecorder) RangeDeleteFromHistoryNode(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromHistoryNode", reflect.TypeOf((*MockDB)(nil).RangeDeleteFromHistoryNode), ctx, filter)
}

// RangeDeleteFromHistoryScheduledTasks mocks base method.
func (m *MockDB) RangeDeleteFromHistoryScheduledTasks(ctx context.Context, filter HistoryScheduledTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromHistoryScheduledTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromHistoryScheduledTasks indicates an expected call of RangeDeleteFromHistoryScheduledTasks.
func (mr *MockDBMockRecorder) RangeDeleteFromHistoryScheduledTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromHistoryScheduledTasks", reflect.TypeOf((*MockDB)(nil).RangeDeleteFromHistoryScheduledTasks), ctx, filter)
}

// RangeDeleteFromMessages mocks base method.
func (m *MockDB) RangeDeleteFromMessages(ctx context.Context, filter QueueMessagesRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromMessages", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromMessages indicates an expected call of RangeDeleteFromMessages.
func (mr *MockDBMockRecorder) RangeDeleteFromMessages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromMessages", reflect.TypeOf((*MockDB)(nil).RangeDeleteFromMessages), ctx, filter)
}

// RangeDeleteFromQueueV2Messages mocks base method.
func (m *MockDB) RangeDeleteFromQueueV2Messages(ctx context.Context, filter QueueV2MessagesFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromQueueV2Messages", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromQueueV2Messages indicates an expected call of RangeDeleteFromQueueV2Messages.
func (mr *MockDBMockRecorder) RangeDeleteFromQueueV2Messages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromQueueV2Messages", reflect.TypeOf((*MockDB)(nil).RangeDeleteFromQueueV2Messages), ctx, filter)
}

// RangeDeleteFromReplicationDLQTasks mocks base method.
func (m *MockDB) RangeDeleteFromReplicationDLQTasks(ctx context.Context, filter ReplicationDLQTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromReplicationDLQTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromReplicationDLQTasks indicates an expected call of RangeDeleteFromReplicationDLQTasks.
func (mr *MockDBMockRecorder) RangeDeleteFromReplicationDLQTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromReplicationDLQTasks", reflect.TypeOf((*MockDB)(nil).RangeDeleteFromReplicationDLQTasks), ctx, filter)
}

// RangeDeleteFromReplicationTasks mocks base method.
func (m *MockDB) RangeDeleteFromReplicationTasks(ctx context.Context, filter ReplicationTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromReplicationTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromReplicationTasks indicates an expected call of RangeDeleteFromReplicationTasks.
func (mr *MockDBMockRecorder) RangeDeleteFromReplicationTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromReplicationTasks", reflect.TypeOf((*MockDB)(nil).RangeDeleteFromReplicationTasks), ctx, filter)
}

// RangeDeleteFromTimerTasks mocks base method.
func (m *MockDB) RangeDeleteFromTimerTasks(ctx context.Context, filter TimerTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromTimerTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromTimerTasks indicates an expected call of RangeDeleteFromTimerTasks.
func (mr *MockDBMockRecorder) RangeDeleteFromTimerTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromTimerTasks", reflect.TypeOf((*MockDB)(nil).RangeDeleteFromTimerTasks), ctx, filter)
}

// RangeDeleteFromTransferTasks mocks base method.
func (m *MockDB) RangeDeleteFromTransferTasks(ctx context.Context, filter TransferTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromTransferTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromTransferTasks indicates an expected call of RangeDeleteFromTransferTasks.
func (mr *MockDBMockRecorder) RangeDeleteFromTransferTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromTransferTasks", reflect.TypeOf((*MockDB)(nil).RangeDeleteFromTransferTasks), ctx, filter)
}

// RangeDeleteFromVisibilityTasks mocks base method.
func (m *MockDB) RangeDeleteFromVisibilityTasks(ctx context.Context, filter VisibilityTasksRangeFilter) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeDeleteFromVisibilityTasks", ctx, filter)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeDeleteFromVisibilityTasks indicates an expected call of RangeDeleteFromVisibilityTasks.
func (mr *MockDBMockRecorder) RangeDeleteFromVisibilityTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeDeleteFromVisibilityTasks", reflect.TypeOf((*MockDB)(nil).RangeDeleteFromVisibilityTasks), ctx, filter)
}

// RangeSelectFromHistoryImmediateTasks mocks base method.
func (m *MockDB) RangeSelectFromHistoryImmediateTasks(ctx context.Context, filter HistoryImmediateTasksRangeFilter) ([]HistoryImmediateTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromHistoryImmediateTasks", ctx, filter)
	ret0, _ := ret[0].([]HistoryImmediateTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromHistoryImmediateTasks indicates an expected call of RangeSelectFromHistoryImmediateTasks.
func (mr *MockDBMockRecorder) RangeSelectFromHistoryImmediateTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromHistoryImmediateTasks", reflect.TypeOf((*MockDB)(nil).RangeSelectFromHistoryImmediateTasks), ctx, filter)
}

// RangeSelectFromHistoryNode mocks base method.
func (m *MockDB) RangeSelectFromHistoryNode(ctx context.Context, filter HistoryNodeSelectFilter) ([]HistoryNodeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromHistoryNode", ctx, filter)
	ret0, _ := ret[0].([]HistoryNodeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromHistoryNode indicates an expected call of RangeSelectFromHistoryNode.
func (mr *MockDBMockRecorder) RangeSelectFromHistoryNode(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromHistoryNode", reflect.TypeOf((*MockDB)(nil).RangeSelectFromHistoryNode), ctx, filter)
}

// RangeSelectFromHistoryScheduledTasks mocks base method.
func (m *MockDB) RangeSelectFromHistoryScheduledTasks(ctx context.Context, filter HistoryScheduledTasksRangeFilter) ([]HistoryScheduledTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromHistoryScheduledTasks", ctx, filter)
	ret0, _ := ret[0].([]HistoryScheduledTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromHistoryScheduledTasks indicates an expected call of RangeSelectFromHistoryScheduledTasks.
func (mr *MockDBMockRecorder) RangeSelectFromHistoryScheduledTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromHistoryScheduledTasks", reflect.TypeOf((*MockDB)(nil).RangeSelectFromHistoryScheduledTasks), ctx, filter)
}

// RangeSelectFromMessages mocks base method.
func (m *MockDB) RangeSelectFromMessages(ctx context.Context, filter QueueMessagesRangeFilter) ([]QueueMessageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromMessages", ctx, filter)
	ret0, _ := ret[0].([]QueueMessageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromMessages indicates an expected call of RangeSelectFromMessages.
func (mr *MockDBMockRecorder) RangeSelectFromMessages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromMessages", reflect.TypeOf((*MockDB)(nil).RangeSelectFromMessages), ctx, filter)
}

// RangeSelectFromQueueV2Messages mocks base method.
func (m *MockDB) RangeSelectFromQueueV2Messages(ctx context.Context, filter QueueV2MessagesFilter) ([]QueueV2MessageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromQueueV2Messages", ctx, filter)
	ret0, _ := ret[0].([]QueueV2MessageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromQueueV2Messages indicates an expected call of RangeSelectFromQueueV2Messages.
func (mr *MockDBMockRecorder) RangeSelectFromQueueV2Messages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromQueueV2Messages", reflect.TypeOf((*MockDB)(nil).RangeSelectFromQueueV2Messages), ctx, filter)
}

// RangeSelectFromReplicationDLQTasks mocks base method.
func (m *MockDB) RangeSelectFromReplicationDLQTasks(ctx context.Context, filter ReplicationDLQTasksRangeFilter) ([]ReplicationDLQTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromReplicationDLQTasks", ctx, filter)
	ret0, _ := ret[0].([]ReplicationDLQTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromReplicationDLQTasks indicates an expected call of RangeSelectFromReplicationDLQTasks.
func (mr *MockDBMockRecorder) RangeSelectFromReplicationDLQTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromReplicationDLQTasks", reflect.TypeOf((*MockDB)(nil).RangeSelectFromReplicationDLQTasks), ctx, filter)
}

// RangeSelectFromReplicationTasks mocks base method.
func (m *MockDB) RangeSelectFromReplicationTasks(ctx context.Context, filter ReplicationTasksRangeFilter) ([]ReplicationTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromReplicationTasks", ctx, filter)
	ret0, _ := ret[0].([]ReplicationTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromReplicationTasks indicates an expected call of RangeSelectFromReplicationTasks.
func (mr *MockDBMockRecorder) RangeSelectFromReplicationTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromReplicationTasks", reflect.TypeOf((*MockDB)(nil).RangeSelectFromReplicationTasks), ctx, filter)
}

// RangeSelectFromTimerTasks mocks base method.
func (m *MockDB) RangeSelectFromTimerTasks(ctx context.Context, filter TimerTasksRangeFilter) ([]TimerTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromTimerTasks", ctx, filter)
	ret0, _ := ret[0].([]TimerTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromTimerTasks indicates an expected call of RangeSelectFromTimerTasks.
func (mr *MockDBMockRecorder) RangeSelectFromTimerTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromTimerTasks", reflect.TypeOf((*MockDB)(nil).RangeSelectFromTimerTasks), ctx, filter)
}

// RangeSelectFromTransferTasks mocks base method.
func (m *MockDB) RangeSelectFromTransferTasks(ctx context.Context, filter TransferTasksRangeFilter) ([]TransferTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromTransferTasks", ctx, filter)
	ret0, _ := ret[0].([]TransferTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromTransferTasks indicates an expected call of RangeSelectFromTransferTasks.
func (mr *MockDBMockRecorder) RangeSelectFromTransferTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromTransferTasks", reflect.TypeOf((*MockDB)(nil).RangeSelectFromTransferTasks), ctx, filter)
}

// RangeSelectFromVisibilityTasks mocks base method.
func (m *MockDB) RangeSelectFromVisibilityTasks(ctx context.Context, filter VisibilityTasksRangeFilter) ([]VisibilityTasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeSelectFromVisibilityTasks", ctx, filter)
	ret0, _ := ret[0].([]VisibilityTasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeSelectFromVisibilityTasks indicates an expected call of RangeSelectFromVisibilityTasks.
func (mr *MockDBMockRecorder) RangeSelectFromVisibilityTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeSelectFromVisibilityTasks", reflect.TypeOf((*MockDB)(nil).RangeSelectFromVisibilityTasks), ctx, filter)
}

// ReadLockExecutions mocks base method.
func (m *MockDB) ReadLockExecutions(ctx context.Context, filter ExecutionsFilter) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLockExecutions", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadLockExecutions indicates an expected call of ReadLockExecutions.
func (mr *MockDBMockRecorder) ReadLockExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLockExecutions", reflect.TypeOf((*MockDB)(nil).ReadLockExecutions), ctx, filter)
}

// ReadLockShards mocks base method.
func (m *MockDB) ReadLockShards(ctx context.Context, filter ShardsFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLockShards", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLockShards indicates an expected call of ReadLockShards.
func (mr *MockDBMockRecorder) ReadLockShards(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLockShards", reflect.TypeOf((*MockDB)(nil).ReadLockShards), ctx, filter)
}

// RemoveFromBuildIdToTaskQueueMapping mocks base method.
func (m *MockDB) RemoveFromBuildIdToTaskQueueMapping(ctx context.Context, request RemoveFromBuildIdToTaskQueueMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromBuildIdToTaskQueueMapping", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromBuildIdToTaskQueueMapping indicates an expected call of RemoveFromBuildIdToTaskQueueMapping.
func (mr *MockDBMockRecorder) RemoveFromBuildIdToTaskQueueMapping(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromBuildIdToTaskQueueMapping", reflect.TypeOf((*MockDB)(nil).RemoveFromBuildIdToTaskQueueMapping), ctx, request)
}

// ReplaceIntoActivityInfoMaps mocks base method.
func (m *MockDB) ReplaceIntoActivityInfoMaps(ctx context.Context, rows []ActivityInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoActivityInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoActivityInfoMaps indicates an expected call of ReplaceIntoActivityInfoMaps.
func (mr *MockDBMockRecorder) ReplaceIntoActivityInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoActivityInfoMaps", reflect.TypeOf((*MockDB)(nil).ReplaceIntoActivityInfoMaps), ctx, rows)
}

// ReplaceIntoChildExecutionInfoMaps mocks base method.
func (m *MockDB) ReplaceIntoChildExecutionInfoMaps(ctx context.Context, rows []ChildExecutionInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoChildExecutionInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoChildExecutionInfoMaps indicates an expected call of ReplaceIntoChildExecutionInfoMaps.
func (mr *MockDBMockRecorder) ReplaceIntoChildExecutionInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoChildExecutionInfoMaps", reflect.TypeOf((*MockDB)(nil).ReplaceIntoChildExecutionInfoMaps), ctx, rows)
}

// ReplaceIntoRequestCancelInfoMaps mocks base method.
func (m *MockDB) ReplaceIntoRequestCancelInfoMaps(ctx context.Context, rows []RequestCancelInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoRequestCancelInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoRequestCancelInfoMaps indicates an expected call of ReplaceIntoRequestCancelInfoMaps.
func (mr *MockDBMockRecorder) ReplaceIntoRequestCancelInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoRequestCancelInfoMaps", reflect.TypeOf((*MockDB)(nil).ReplaceIntoRequestCancelInfoMaps), ctx, rows)
}

// ReplaceIntoSignalInfoMaps mocks base method.
func (m *MockDB) ReplaceIntoSignalInfoMaps(ctx context.Context, rows []SignalInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoSignalInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoSignalInfoMaps indicates an expected call of ReplaceIntoSignalInfoMaps.
func (mr *MockDBMockRecorder) ReplaceIntoSignalInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoSignalInfoMaps", reflect.TypeOf((*MockDB)(nil).ReplaceIntoSignalInfoMaps), ctx, rows)
}

// ReplaceIntoSignalsRequestedSets mocks base method.
func (m *MockDB) ReplaceIntoSignalsRequestedSets(ctx context.Context, rows []SignalsRequestedSetsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoSignalsRequestedSets", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoSignalsRequestedSets indicates an expected call of ReplaceIntoSignalsRequestedSets.
func (mr *MockDBMockRecorder) ReplaceIntoSignalsRequestedSets(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoSignalsRequestedSets", reflect.TypeOf((*MockDB)(nil).ReplaceIntoSignalsRequestedSets), ctx, rows)
}

// ReplaceIntoTimerInfoMaps mocks base method.
func (m *MockDB) ReplaceIntoTimerInfoMaps(ctx context.Context, rows []TimerInfoMapsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoTimerInfoMaps", ctx, rows)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoTimerInfoMaps indicates an expected call of ReplaceIntoTimerInfoMaps.
func (mr *MockDBMockRecorder) ReplaceIntoTimerInfoMaps(ctx, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoTimerInfoMaps", reflect.TypeOf((*MockDB)(nil).ReplaceIntoTimerInfoMaps), ctx, rows)
}

// ReplaceIntoVisibility mocks base method.
func (m *MockDB) ReplaceIntoVisibility(ctx context.Context, row *VisibilityRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceIntoVisibility", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceIntoVisibility indicates an expected call of ReplaceIntoVisibility.
func (mr *MockDBMockRecorder) ReplaceIntoVisibility(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceIntoVisibility", reflect.TypeOf((*MockDB)(nil).ReplaceIntoVisibility), ctx, row)
}

// SaveClusterMetadata mocks base method.
func (m *MockDB) SaveClusterMetadata(ctx context.Context, row *ClusterMetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveClusterMetadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveClusterMetadata indicates an expected call of SaveClusterMetadata.
func (mr *MockDBMockRecorder) SaveClusterMetadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveClusterMetadata", reflect.TypeOf((*MockDB)(nil).SaveClusterMetadata), ctx, row)
}

// SelectAllFromActivityInfoMaps mocks base method.
func (m *MockDB) SelectAllFromActivityInfoMaps(ctx context.Context, filter ActivityInfoMapsAllFilter) ([]ActivityInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromActivityInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]ActivityInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromActivityInfoMaps indicates an expected call of SelectAllFromActivityInfoMaps.
func (mr *MockDBMockRecorder) SelectAllFromActivityInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromActivityInfoMaps", reflect.TypeOf((*MockDB)(nil).SelectAllFromActivityInfoMaps), ctx, filter)
}

// SelectAllFromChildExecutionInfoMaps mocks base method.
func (m *MockDB) SelectAllFromChildExecutionInfoMaps(ctx context.Context, filter ChildExecutionInfoMapsAllFilter) ([]ChildExecutionInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromChildExecutionInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]ChildExecutionInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromChildExecutionInfoMaps indicates an expected call of SelectAllFromChildExecutionInfoMaps.
func (mr *MockDBMockRecorder) SelectAllFromChildExecutionInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromChildExecutionInfoMaps", reflect.TypeOf((*MockDB)(nil).SelectAllFromChildExecutionInfoMaps), ctx, filter)
}

// SelectAllFromRequestCancelInfoMaps mocks base method.
func (m *MockDB) SelectAllFromRequestCancelInfoMaps(ctx context.Context, filter RequestCancelInfoMapsAllFilter) ([]RequestCancelInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromRequestCancelInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]RequestCancelInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromRequestCancelInfoMaps indicates an expected call of SelectAllFromRequestCancelInfoMaps.
func (mr *MockDBMockRecorder) SelectAllFromRequestCancelInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromRequestCancelInfoMaps", reflect.TypeOf((*MockDB)(nil).SelectAllFromRequestCancelInfoMaps), ctx, filter)
}

// SelectAllFromSignalInfoMaps mocks base method.
func (m *MockDB) SelectAllFromSignalInfoMaps(ctx context.Context, filter SignalInfoMapsAllFilter) ([]SignalInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromSignalInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]SignalInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromSignalInfoMaps indicates an expected call of SelectAllFromSignalInfoMaps.
func (mr *MockDBMockRecorder) SelectAllFromSignalInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromSignalInfoMaps", reflect.TypeOf((*MockDB)(nil).SelectAllFromSignalInfoMaps), ctx, filter)
}

// SelectAllFromSignalsRequestedSets mocks base method.
func (m *MockDB) SelectAllFromSignalsRequestedSets(ctx context.Context, filter SignalsRequestedSetsAllFilter) ([]SignalsRequestedSetsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromSignalsRequestedSets", ctx, filter)
	ret0, _ := ret[0].([]SignalsRequestedSetsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromSignalsRequestedSets indicates an expected call of SelectAllFromSignalsRequestedSets.
func (mr *MockDBMockRecorder) SelectAllFromSignalsRequestedSets(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromSignalsRequestedSets", reflect.TypeOf((*MockDB)(nil).SelectAllFromSignalsRequestedSets), ctx, filter)
}

// SelectAllFromTimerInfoMaps mocks base method.
func (m *MockDB) SelectAllFromTimerInfoMaps(ctx context.Context, filter TimerInfoMapsAllFilter) ([]TimerInfoMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllFromTimerInfoMaps", ctx, filter)
	ret0, _ := ret[0].([]TimerInfoMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllFromTimerInfoMaps indicates an expected call of SelectAllFromTimerInfoMaps.
func (mr *MockDBMockRecorder) SelectAllFromTimerInfoMaps(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllFromTimerInfoMaps", reflect.TypeOf((*MockDB)(nil).SelectAllFromTimerInfoMaps), ctx, filter)
}

// SelectFromBufferedEvents mocks base method.
func (m *MockDB) SelectFromBufferedEvents(ctx context.Context, filter BufferedEventsFilter) ([]BufferedEventsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromBufferedEvents", ctx, filter)
	ret0, _ := ret[0].([]BufferedEventsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromBufferedEvents indicates an expected call of SelectFromBufferedEvents.
func (mr *MockDBMockRecorder) SelectFromBufferedEvents(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromBufferedEvents", reflect.TypeOf((*MockDB)(nil).SelectFromBufferedEvents), ctx, filter)
}

// SelectFromCurrentExecutions mocks base method.
func (m *MockDB) SelectFromCurrentExecutions(ctx context.Context, filter CurrentExecutionsFilter) (*CurrentExecutionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromCurrentExecutions", ctx, filter)
	ret0, _ := ret[0].(*CurrentExecutionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromCurrentExecutions indicates an expected call of SelectFromCurrentExecutions.
func (mr *MockDBMockRecorder) SelectFromCurrentExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromCurrentExecutions", reflect.TypeOf((*MockDB)(nil).SelectFromCurrentExecutions), ctx, filter)
}

// SelectFromExecutions mocks base method.
func (m *MockDB) SelectFromExecutions(ctx context.Context, filter ExecutionsFilter) (*ExecutionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromExecutions", ctx, filter)
	ret0, _ := ret[0].(*ExecutionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromExecutions indicates an expected call of SelectFromExecutions.
func (mr *MockDBMockRecorder) SelectFromExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromExecutions", reflect.TypeOf((*MockDB)(nil).SelectFromExecutions), ctx, filter)
}

// SelectFromHistoryTree mocks base method.
func (m *MockDB) SelectFromHistoryTree(ctx context.Context, filter HistoryTreeSelectFilter) ([]HistoryTreeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromHistoryTree", ctx, filter)
	ret0, _ := ret[0].([]HistoryTreeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromHistoryTree indicates an expected call of SelectFromHistoryTree.
func (mr *MockDBMockRecorder) SelectFromHistoryTree(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromHistoryTree", reflect.TypeOf((*MockDB)(nil).SelectFromHistoryTree), ctx, filter)
}

// SelectFromMessages mocks base method.
func (m *MockDB) SelectFromMessages(ctx context.Context, filter QueueMessagesFilter) ([]QueueMessageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromMessages", ctx, filter)
	ret0, _ := ret[0].([]QueueMessageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromMessages indicates an expected call of SelectFromMessages.
func (mr *MockDBMockRecorder) SelectFromMessages(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromMessages", reflect.TypeOf((*MockDB)(nil).SelectFromMessages), ctx, filter)
}

// SelectFromNamespace mocks base method.
func (m *MockDB) SelectFromNamespace(ctx context.Context, filter NamespaceFilter) ([]NamespaceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromNamespace", ctx, filter)
	ret0, _ := ret[0].([]NamespaceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromNamespace indicates an expected call of SelectFromNamespace.
func (mr *MockDBMockRecorder) SelectFromNamespace(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromNamespace", reflect.TypeOf((*MockDB)(nil).SelectFromNamespace), ctx, filter)
}

// SelectFromNamespaceMetadata mocks base method.
func (m *MockDB) SelectFromNamespaceMetadata(ctx context.Context) (*NamespaceMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromNamespaceMetadata", ctx)
	ret0, _ := ret[0].(*NamespaceMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromNamespaceMetadata indicates an expected call of SelectFromNamespaceMetadata.
func (mr *MockDBMockRecorder) SelectFromNamespaceMetadata(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromNamespaceMetadata", reflect.TypeOf((*MockDB)(nil).SelectFromNamespaceMetadata), ctx)
}

// SelectFromQueueMetadata mocks base method.
func (m *MockDB) SelectFromQueueMetadata(ctx context.Context, filter QueueMetadataFilter) (*QueueMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromQueueMetadata", ctx, filter)
	ret0, _ := ret[0].(*QueueMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromQueueMetadata indicates an expected call of SelectFromQueueMetadata.
func (mr *MockDBMockRecorder) SelectFromQueueMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromQueueMetadata", reflect.TypeOf((*MockDB)(nil).SelectFromQueueMetadata), ctx, filter)
}

// SelectFromQueueV2Metadata mocks base method.
func (m *MockDB) SelectFromQueueV2Metadata(ctx context.Context, filter QueueV2MetadataFilter) (*QueueV2MetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromQueueV2Metadata", ctx, filter)
	ret0, _ := ret[0].(*QueueV2MetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromQueueV2Metadata indicates an expected call of SelectFromQueueV2Metadata.
func (mr *MockDBMockRecorder) SelectFromQueueV2Metadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromQueueV2Metadata", reflect.TypeOf((*MockDB)(nil).SelectFromQueueV2Metadata), ctx, filter)
}

// SelectFromQueueV2MetadataForUpdate mocks base method.
func (m *MockDB) SelectFromQueueV2MetadataForUpdate(ctx context.Context, filter QueueV2MetadataFilter) (*QueueV2MetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromQueueV2MetadataForUpdate", ctx, filter)
	ret0, _ := ret[0].(*QueueV2MetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromQueueV2MetadataForUpdate indicates an expected call of SelectFromQueueV2MetadataForUpdate.
func (mr *MockDBMockRecorder) SelectFromQueueV2MetadataForUpdate(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromQueueV2MetadataForUpdate", reflect.TypeOf((*MockDB)(nil).SelectFromQueueV2MetadataForUpdate), ctx, filter)
}

// SelectFromShards mocks base method.
func (m *MockDB) SelectFromShards(ctx context.Context, filter ShardsFilter) (*ShardsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromShards", ctx, filter)
	ret0, _ := ret[0].(*ShardsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromShards indicates an expected call of SelectFromShards.
func (mr *MockDBMockRecorder) SelectFromShards(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromShards", reflect.TypeOf((*MockDB)(nil).SelectFromShards), ctx, filter)
}

// SelectFromTaskQueues mocks base method.
func (m *MockDB) SelectFromTaskQueues(ctx context.Context, filter TaskQueuesFilter) ([]TaskQueuesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromTaskQueues", ctx, filter)
	ret0, _ := ret[0].([]TaskQueuesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromTaskQueues indicates an expected call of SelectFromTaskQueues.
func (mr *MockDBMockRecorder) SelectFromTaskQueues(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromTaskQueues", reflect.TypeOf((*MockDB)(nil).SelectFromTaskQueues), ctx, filter)
}

// SelectFromTasks mocks base method.
func (m *MockDB) SelectFromTasks(ctx context.Context, filter TasksFilter) ([]TasksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromTasks", ctx, filter)
	ret0, _ := ret[0].([]TasksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromTasks indicates an expected call of SelectFromTasks.
func (mr *MockDBMockRecorder) SelectFromTasks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromTasks", reflect.TypeOf((*MockDB)(nil).SelectFromTasks), ctx, filter)
}

// SelectFromVisibility mocks base method.
func (m *MockDB) SelectFromVisibility(ctx context.Context, filter VisibilitySelectFilter) ([]VisibilityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFromVisibility", ctx, filter)
	ret0, _ := ret[0].([]VisibilityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFromVisibility indicates an expected call of SelectFromVisibility.
func (mr *MockDBMockRecorder) SelectFromVisibility(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFromVisibility", reflect.TypeOf((*MockDB)(nil).SelectFromVisibility), ctx, filter)
}

// SelectNameFromQueueV2Metadata mocks base method.
func (m *MockDB) SelectNameFromQueueV2Metadata(ctx context.Context, filter QueueV2MetadataTypeFilter) ([]QueueV2MetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectNameFromQueueV2Metadata", ctx, filter)
	ret0, _ := ret[0].([]QueueV2MetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectNameFromQueueV2Metadata indicates an expected call of SelectNameFromQueueV2Metadata.
func (mr *MockDBMockRecorder) SelectNameFromQueueV2Metadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectNameFromQueueV2Metadata", reflect.TypeOf((*MockDB)(nil).SelectNameFromQueueV2Metadata), ctx, filter)
}

// UpdateCurrentExecutions mocks base method.
func (m *MockDB) UpdateCurrentExecutions(ctx context.Context, row *CurrentExecutionsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrentExecutions", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCurrentExecutions indicates an expected call of UpdateCurrentExecutions.
func (mr *MockDBMockRecorder) UpdateCurrentExecutions(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrentExecutions", reflect.TypeOf((*MockDB)(nil).UpdateCurrentExecutions), ctx, row)
}

// UpdateExecutions mocks base method.
func (m *MockDB) UpdateExecutions(ctx context.Context, row *ExecutionsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExecutions", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExecutions indicates an expected call of UpdateExecutions.
func (mr *MockDBMockRecorder) UpdateExecutions(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExecutions", reflect.TypeOf((*MockDB)(nil).UpdateExecutions), ctx, row)
}

// UpdateNamespace mocks base method.
func (m *MockDB) UpdateNamespace(ctx context.Context, row *NamespaceRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespace", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespace indicates an expected call of UpdateNamespace.
func (mr *MockDBMockRecorder) UpdateNamespace(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockDB)(nil).UpdateNamespace), ctx, row)
}

// UpdateNamespaceMetadata mocks base method.
func (m *MockDB) UpdateNamespaceMetadata(ctx context.Context, row *NamespaceMetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespaceMetadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespaceMetadata indicates an expected call of UpdateNamespaceMetadata.
func (mr *MockDBMockRecorder) UpdateNamespaceMetadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceMetadata", reflect.TypeOf((*MockDB)(nil).UpdateNamespaceMetadata), ctx, row)
}

// UpdateNexusEndpoint mocks base method.
func (m *MockDB) UpdateNexusEndpoint(ctx context.Context, row *NexusEndpointsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNexusEndpoint", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNexusEndpoint indicates an expected call of UpdateNexusEndpoint.
func (mr *MockDBMockRecorder) UpdateNexusEndpoint(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNexusEndpoint", reflect.TypeOf((*MockDB)(nil).UpdateNexusEndpoint), ctx, row)
}

// UpdateQueueMetadata mocks base method.
func (m *MockDB) UpdateQueueMetadata(ctx context.Context, row *QueueMetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueMetadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueueMetadata indicates an expected call of UpdateQueueMetadata.
func (mr *MockDBMockRecorder) UpdateQueueMetadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueMetadata", reflect.TypeOf((*MockDB)(nil).UpdateQueueMetadata), ctx, row)
}

// UpdateQueueV2Metadata mocks base method.
func (m *MockDB) UpdateQueueV2Metadata(ctx context.Context, row *QueueV2MetadataRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueV2Metadata", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueueV2Metadata indicates an expected call of UpdateQueueV2Metadata.
func (mr *MockDBMockRecorder) UpdateQueueV2Metadata(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueV2Metadata", reflect.TypeOf((*MockDB)(nil).UpdateQueueV2Metadata), ctx, row)
}

// UpdateShards mocks base method.
func (m *MockDB) UpdateShards(ctx context.Context, row *ShardsRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShards", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShards indicates an expected call of UpdateShards.
func (mr *MockDBMockRecorder) UpdateShards(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShards", reflect.TypeOf((*MockDB)(nil).UpdateShards), ctx, row)
}

// UpdateTaskQueueUserData mocks base method.
func (m *MockDB) UpdateTaskQueueUserData(ctx context.Context, request *UpdateTaskQueueDataRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskQueueUserData", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskQueueUserData indicates an expected call of UpdateTaskQueueUserData.
func (mr *MockDBMockRecorder) UpdateTaskQueueUserData(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskQueueUserData", reflect.TypeOf((*MockDB)(nil).UpdateTaskQueueUserData), ctx, request)
}

// UpdateTaskQueues mocks base method.
func (m *MockDB) UpdateTaskQueues(ctx context.Context, row *TaskQueuesRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskQueues", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskQueues indicates an expected call of UpdateTaskQueues.
func (mr *MockDBMockRecorder) UpdateTaskQueues(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskQueues", reflect.TypeOf((*MockDB)(nil).UpdateTaskQueues), ctx, row)
}

// UpsertClusterMembership mocks base method.
func (m *MockDB) UpsertClusterMembership(ctx context.Context, row *ClusterMembershipRow) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertClusterMembership", ctx, row)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertClusterMembership indicates an expected call of UpsertClusterMembership.
func (mr *MockDBMockRecorder) UpsertClusterMembership(ctx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertClusterMembership", reflect.TypeOf((*MockDB)(nil).UpsertClusterMembership), ctx, row)
}

// WriteLockExecutions mocks base method.
func (m *MockDB) WriteLockExecutions(ctx context.Context, filter ExecutionsFilter) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLockExecutions", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WriteLockExecutions indicates an expected call of WriteLockExecutions.
func (mr *MockDBMockRecorder) WriteLockExecutions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLockExecutions", reflect.TypeOf((*MockDB)(nil).WriteLockExecutions), ctx, filter)
}

// WriteLockGetClusterMetadata mocks base method.
func (m *MockDB) WriteLockGetClusterMetadata(ctx context.Context, filter *ClusterMetadataFilter) (*ClusterMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLockGetClusterMetadata", ctx, filter)
	ret0, _ := ret[0].(*ClusterMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteLockGetClusterMetadata indicates an expected call of WriteLockGetClusterMetadata.
func (mr *MockDBMockRecorder) WriteLockGetClusterMetadata(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLockGetClusterMetadata", reflect.TypeOf((*MockDB)(nil).WriteLockGetClusterMetadata), ctx, filter)
}

// WriteLockShards mocks base method.
func (m *MockDB) WriteLockShards(ctx context.Context, filter ShardsFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLockShards", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteLockShards indicates an expected call of WriteLockShards.
func (mr *MockDBMockRecorder) WriteLockShards(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLockShards", reflect.TypeOf((*MockDB)(nil).WriteLockShards), ctx, filter)
}

// MockAdminDB is a mock of AdminDB interface.
type MockAdminDB struct {
	ctrl     *gomock.Controller
	recorder *MockAdminDBMockRecorder
}

// MockAdminDBMockRecorder is the mock recorder for MockAdminDB.
type MockAdminDBMockRecorder struct {
	mock *MockAdminDB
}

// NewMockAdminDB creates a new mock instance.
func NewMockAdminDB(ctrl *gomock.Controller) *MockAdminDB {
	mock := &MockAdminDB{ctrl: ctrl}
	mock.recorder = &MockAdminDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminDB) EXPECT() *MockAdminDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAdminDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAdminDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAdminDB)(nil).Close))
}

// CreateDatabase mocks base method.
func (m *MockAdminDB) CreateDatabase(database string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", database)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockAdminDBMockRecorder) CreateDatabase(database interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockAdminDB)(nil).CreateDatabase), database)
}

// CreateSchemaVersionTables mocks base method.
func (m *MockAdminDB) CreateSchemaVersionTables() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchemaVersionTables")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchemaVersionTables indicates an expected call of CreateSchemaVersionTables.
func (mr *MockAdminDBMockRecorder) CreateSchemaVersionTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaVersionTables", reflect.TypeOf((*MockAdminDB)(nil).CreateSchemaVersionTables))
}

// DropAllTables mocks base method.
func (m *MockAdminDB) DropAllTables(database string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropAllTables", database)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropAllTables indicates an expected call of DropAllTables.
func (mr *MockAdminDBMockRecorder) DropAllTables(database interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAllTables", reflect.TypeOf((*MockAdminDB)(nil).DropAllTables), database)
}

// DropDatabase mocks base method.
func (m *MockAdminDB) DropDatabase(database string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDatabase", database)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDatabase indicates an expected call of DropDatabase.
func (mr *MockAdminDBMockRecorder) DropDatabase(database interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabase", reflect.TypeOf((*MockAdminDB)(nil).DropDatabase), database)
}

// DropTable mocks base method.
func (m *MockAdminDB) DropTable(table string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTable", table)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable.
func (mr *MockAdminDBMockRecorder) DropTable(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockAdminDB)(nil).DropTable), table)
}

// Exec mocks base method.
func (m *MockAdminDB) Exec(stmt string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{stmt}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockAdminDBMockRecorder) Exec(stmt interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stmt}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockAdminDB)(nil).Exec), varargs...)
}

// ExpectedVersion mocks base method.
func (m *MockAdminDB) ExpectedVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpectedVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// ExpectedVersion indicates an expected call of ExpectedVersion.
func (mr *MockAdminDBMockRecorder) ExpectedVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectedVersion", reflect.TypeOf((*MockAdminDB)(nil).ExpectedVersion))
}

// ListTables mocks base method.
func (m *MockAdminDB) ListTables(database string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables", database)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables.
func (mr *MockAdminDBMockRecorder) ListTables(database interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockAdminDB)(nil).ListTables), database)
}

// PluginName mocks base method.
func (m *MockAdminDB) PluginName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginName")
	ret0, _ := ret[0].(string)
	return ret0
}

// PluginName indicates an expected call of PluginName.
func (mr *MockAdminDBMockRecorder) PluginName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginName", reflect.TypeOf((*MockAdminDB)(nil).PluginName))
}

// ReadSchemaVersion mocks base method.
func (m *MockAdminDB) ReadSchemaVersion(database string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSchemaVersion", database)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSchemaVersion indicates an expected call of ReadSchemaVersion.
func (mr *MockAdminDBMockRecorder) ReadSchemaVersion(database interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSchemaVersion", reflect.TypeOf((*MockAdminDB)(nil).ReadSchemaVersion), database)
}

// UpdateSchemaVersion mocks base method.
func (m *MockAdminDB) UpdateSchemaVersion(database, newVersion, minCompatibleVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchemaVersion", database, newVersion, minCompatibleVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchemaVersion indicates an expected call of UpdateSchemaVersion.
func (mr *MockAdminDBMockRecorder) UpdateSchemaVersion(database, newVersion, minCompatibleVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchemaVersion", reflect.TypeOf((*MockAdminDB)(nil).UpdateSchemaVersion), database, newVersion, minCompatibleVersion)
}

// VerifyVersion mocks base method.
func (m *MockAdminDB) VerifyVersion() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyVersion")
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyVersion indicates an expected call of VerifyVersion.
func (mr *MockAdminDBMockRecorder) VerifyVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyVersion", reflect.TypeOf((*MockAdminDB)(nil).VerifyVersion))
}

// WriteSchemaUpdateLog mocks base method.
func (m *MockAdminDB) WriteSchemaUpdateLog(oldVersion, newVersion, manifestMD5, desc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSchemaUpdateLog", oldVersion, newVersion, manifestMD5, desc)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSchemaUpdateLog indicates an expected call of WriteSchemaUpdateLog.
func (mr *MockAdminDBMockRecorder) WriteSchemaUpdateLog(oldVersion, newVersion, manifestMD5, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSchemaUpdateLog", reflect.TypeOf((*MockAdminDB)(nil).WriteSchemaUpdateLog), oldVersion, newVersion, manifestMD5, desc)
}

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockConn) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockConnMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockConn)(nil).ExecContext), varargs...)
}

// GetContext mocks base method.
func (m *MockConn) GetContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockConnMockRecorder) GetContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockConn)(nil).GetContext), varargs...)
}

// NamedExecContext mocks base method.
func (m *MockConn) NamedExecContext(ctx context.Context, query string, arg interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedExecContext", ctx, query, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedExecContext indicates an expected call of NamedExecContext.
func (mr *MockConnMockRecorder) NamedExecContext(ctx, query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedExecContext", reflect.TypeOf((*MockConn)(nil).NamedExecContext), ctx, query, arg)
}

// PrepareNamedContext mocks base method.
func (m *MockConn) PrepareNamedContext(ctx context.Context, query string) (*sqlx.NamedStmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNamedContext", ctx, query)
	ret0, _ := ret[0].(*sqlx.NamedStmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareNamedContext indicates an expected call of PrepareNamedContext.
func (mr *MockConnMockRecorder) PrepareNamedContext(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNamedContext", reflect.TypeOf((*MockConn)(nil).PrepareNamedContext), ctx, query)
}

// Rebind mocks base method.
func (m *MockConn) Rebind(query string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebind", query)
	ret0, _ := ret[0].(string)
	return ret0
}

// Rebind indicates an expected call of Rebind.
func (mr *MockConnMockRecorder) Rebind(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebind", reflect.TypeOf((*MockConn)(nil).Rebind), query)
}

// SelectContext mocks base method.
func (m *MockConn) SelectContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockConnMockRecorder) SelectContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockConn)(nil).SelectContext), varargs...)
}
